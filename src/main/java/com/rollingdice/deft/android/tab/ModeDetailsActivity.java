package com.rollingdice.deft.android.tab;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ExpandableListAdapter;
import android.widget.ExpandableListView;

import com.activeandroid.query.Select;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.MutableData;
import com.google.firebase.database.Transaction;
import com.google.firebase.database.ValueEventListener;
import com.rollingdice.deft.android.tab.datahelper.AutoGeneratedId;
import com.rollingdice.deft.android.tab.datahelper.ModeDataHelper;
import com.rollingdice.deft.android.tab.model.Appliance;
import com.rollingdice.deft.android.tab.model.Customer;
import com.rollingdice.deft.android.tab.model.Room;
import com.rollingdice.deft.android.tab.model.RoomAppliance;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Rolling Dice on 1/28/2016.
 */
public class ModeDetailsActivity extends Activity
{
    private EditText modeName;
    String mName;
    private ExpandableListView expandableListView;
    Button selectAppliance,save,cancel;

    ExpandableListAdapter expandableListAdapter;
    List expandableListTitle;
    HashMap<String, ArrayList<RoomAppliance>>roomApplianceList;
    DatabaseReference localRef;
    private String room_Name;
    private List<Room> roomList;
    private String roomId;
    private String app_Name;
    private List<Appliance> app;
    private List<Appliance> app_NotSelected;
    private String applinceId = "";
    private String slaveId;
    private String appNotSelectedString = "";
    private String modeID;
    private ArrayList<String> notSelectedStringArray = new ArrayList<>();
    private ArrayList<String> notSelectedStringArrayFinal = new ArrayList<>();
    private ArrayList<String> selectedStringArray = new ArrayList<>();


    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_mode_details);
        try {
            localRef = GlobalApplication.firebaseRef;

            //modeName = (EditText) findViewById(R.id.et_mood_name);
            mName = String.valueOf(modeName.getText());
            save = (Button) findViewById(R.id.btn_save);
            //selectAppliance = (Button) findViewById(R.id.btn_select_appliance);

            cancel = (Button) findViewById(R.id.btn_cancel);

            expandableListView = (ExpandableListView) findViewById(R.id.expandableListViewForAppliance);

            roomApplianceList = new HashMap<>();


            final DatabaseReference applianceDetails = localRef.child("rooms").child(Customer.getCustomer().customerId).child("roomdetails");

            applianceDetails.addValueEventListener(new ValueEventListener() {
                @Override
                public void onDataChange(DataSnapshot snapshot) {
                    for (DataSnapshot roomSnapshot : snapshot.getChildren()) {

                        ArrayList<RoomAppliance> appliances = new ArrayList();
                        //Getting each room
                        if (!roomSnapshot.getRef().toString().contains("globalOff"))
                        {

                            String roomId = roomSnapshot.child("roomId").getValue(String.class);
                            String roomName = roomSnapshot.child("roomName").getValue(String.class);
                            if (roomId != null) {
                                appliances = new ArrayList();
                                for (DataSnapshot type : roomSnapshot.getChildren()) {
                                    for(DataSnapshot slave : type.getChildren()) {
                                        if (slave.getRef().toString().contains("appliance")) {
                                            // Getting each appliance
                                            for (DataSnapshot applianc : slave.getChildren()) {
                                                RoomAppliance roomAppliance = applianc.getValue(RoomAppliance.class);

                                                appliances.add(roomAppliance);

                                            }
                                        }
                                    }
                                }
                            }
                            setRoomApplianceStringList(roomName, appliances);
                        }
                    }
                }

                @Override
                public void onCancelled(DatabaseError DatabaseError) {
                    System.out.println("The read failed: " + DatabaseError.getMessage());
                }
            });

            //getAppliance();
            save.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    /*app_NotSelected = (new Select().from(Appliance.class).where("applianceName!= ?", app_Name)
                            .where("roomId= ?", roomId).where("applianceId not in ?",applinceId).execute());*/

                    applinceId = applinceId.substring(0,applinceId.length()-1);
                    /*app_NotSelected = SQLiteUtils.rawQuery(Appliance.class,
                            "SELECT * from Appliances where roomId = ? ",new String[]{roomId});

                    ArrayList<String> notSelectedStringArray = new ArrayList();

                    for (int j = 0; j < app_NotSelected.size(); j++)
                    {
                        notSelectedStringArray.add(app_NotSelected.get(j).applianceId);
                    }

                    notSelectedStringArray.removeAll(selectedStringArray);
                    List<RoomAppliance> temp = roomApplianceList.get(room_Name);
                    for (int b = 0; b< notSelectedStringArray.size();b++)
                    {
                        for (int a = 0; a< temp.size(); a++)
                        {
                            if(temp.get(a).getId().equals(notSelectedStringArray.get(b)) && temp.get(a).isState())
                            {
                                notSelectedStringArrayFinal.add(notSelectedStringArray.get(b));
                            }
                        }
                    }

                    for (int j = 0; j < notSelectedStringArrayFinal.size(); j++)
                    {
                        appNotSelectedString = appNotSelectedString + notSelectedStringArray.get(j) +",";
                    }

                    appNotSelectedString = appNotSelectedString.substring(0,appNotSelectedString.length()-1);
*/
                    modeID = AutoGeneratedId.autoGenerated_MODE_ID();

                    ModeDataHelper.addMode(modeID, modeName.getText().toString(),
                            applinceId, app_Name, "false", false, 0, 0, 5, room_Name,
                            roomId, slaveId/*,"","",""*/);

                    DatabaseReference modeRef = localRef.child("mode").child(Customer.getCustomer().customerId).child("modeDetails").child(modeID);
                    Map<String, Object> modeDetails = new HashMap<>();
                    modeDetails.put("moodName", modeName.getText().toString());
                    modeDetails.put("modeId", modeID);
                    modeDetails.put("applianceId", applinceId);
                    modeDetails.put("applianceName", app_Name);
                    modeDetails.put("state", false);
                    modeDetails.put("dimmable", false);
                    modeDetails.put("toggle", 0);
                    modeDetails.put("dimableToggle",0);
                    modeDetails.put("dimableValue", 0);
                    modeDetails.put("roomName", room_Name);
                    modeDetails.put("roomId", roomId);
                    modeDetails.put("slaveId", slaveId);
                 /*   modeDetails.put("offAppliances", "");
                    modeDetails.put("moodONIRCommand","");
                    modeDetails.put("moodOFFIRCommand","");*/
                    modeRef.setValue(modeDetails);
                    finish();
                    startActivity(new Intent(ModeDetailsActivity.this, HomeActivity.class));

                    DatabaseReference modeCountDetails = localRef.child("mode").child(Customer.getCustomer().customerId).child("modeCountDetails").child("modeCount");
                    updateCount(modeCountDetails, 1);

                }
            });

            cancel.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    finish();
                    startActivity(new Intent(ModeDetailsActivity.this, HomeActivity.class));
                }
            });

            selectAppliance.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    getAppliance();
                }
            });
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }



    }

    private void updateCount(DatabaseReference modeCountDetails, final int i)
    {
        try {
            modeCountDetails.runTransaction(new Transaction.Handler() {
                @Override
                public Transaction.Result doTransaction(MutableData currentData) {
                    if (currentData.getValue() == null) {
                        currentData.setValue(1);
                    } else {
                        currentData.setValue((Long) currentData.getValue() + i);
                    }
                    return Transaction.success(currentData); //we can also abort by calling Transaction.abort()
                }

                @Override
                public void onComplete(DatabaseError DatabaseError, boolean committed, DataSnapshot currentData) {
                    //This method will be called once with the results of the transaction.


                }
            });
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }

    }




    private void getAppliance()
    {
        expandableListTitle = new ArrayList<>(roomApplianceList.keySet());
        expandableListAdapter = new com.rollingdice.deft.android.tab.user.ExpandableListAdapter(getApplicationContext(),expandableListTitle, roomApplianceList );
        expandableListView.setAdapter(expandableListAdapter);
        expandableListView.setOnGroupExpandListener(new ExpandableListView.OnGroupExpandListener() {
            @Override
            public void onGroupExpand(int groupPosition) {

            }
        });



        expandableListView.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener()
        {
            @Override
            public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id)
            {

                appNotSelectedString = "";
                room_Name = (String) parent.getExpandableListAdapter().getGroup(groupPosition);

                roomList = new Select().from(Room.class).where("roomName='" + room_Name + "'").execute();
                for (int i = 0; i < roomList.size(); i++) {
                    Room r = roomList.get(i);
                    roomId = r.roomId;
                }

               return false;
            }
        });

        expandableListView.setOnChildClickListener(new ExpandableListView.OnChildClickListener()
        {
            @Override
            public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id)
            {



                RoomAppliance roomAppliance=(RoomAppliance)parent.getExpandableListAdapter().getChild(groupPosition, childPosition);
                slaveId = roomAppliance.getSlaveId();
                app_Name=roomAppliance.getApplianceName();

                //app_Name = (String) parent.getExpandableListAdapter().getChild(groupPosition, childPosition);

                app = (new Select().from(Appliance.class).where("applianceName= ?", app_Name)
                        .where("roomId= ?", roomId).execute());


                applinceId = applinceId + app.get(0).applianceId + ",";
                selectedStringArray.add((app.get(0).applianceId));






                return false;



            }
        });

    }

/*
    app_NotSelected = (new Select().from(Appliance.class).where("applianceName!= ?", app_Name)
    .where("roomId= ?", roomId).execute());

    ArrayList<RoomAppliance> onAppliance = new ArrayList<RoomAppliance>();



    for (int j = 0; j < onAppliance.size(); j++)
    {

        appNotSelectedString = appNotSelectedString + onAppliance.get(j).getId() + ",";
    }

    for (int j = 0; j < app.size(); j++)
    {
        Appliance a = app.get(j);
        applinceId = a.applianceId;
        slaveId=a.slaveId;
    }
*/



    public void setRoomApplianceStringList(String roomName, ArrayList<RoomAppliance> roomList)
    {
        try
        {
            roomApplianceList.put(roomName, roomList);
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }
    }

}
