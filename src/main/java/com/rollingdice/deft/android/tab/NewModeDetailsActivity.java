package com.rollingdice.deft.android.tab;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.MutableData;
import com.google.firebase.database.Transaction;
import com.google.firebase.database.ValueEventListener;
import com.rollingdice.deft.android.tab.datahelper.AutoGeneratedId;
import com.rollingdice.deft.android.tab.datahelper.ModeDataHelper;
import com.rollingdice.deft.android.tab.datahelper.RemoteKeysDataHelper;
import com.rollingdice.deft.android.tab.model.Customer;
import com.rollingdice.deft.android.tab.model.Mode;
import com.rollingdice.deft.android.tab.model.RemoteDetails;
import com.rollingdice.deft.android.tab.model.RemoteKeyDetails;
import com.rollingdice.deft.android.tab.model.RoomAppliance;
import com.rollingdice.deft.android.tab.model.RoomDetails;
import com.leo.simplearcloader.ArcConfiguration;
import com.leo.simplearcloader.SimpleArcDialog;
import com.leo.simplearcloader.SimpleArcLoader;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Rolling Dice on 6/24/2016.
 */
public class NewModeDetailsActivity extends AppCompatActivity
{
    String modeId,modeName,modeRoomId,modeRoomName,slaveId;
    DatabaseReference localRef;
    ArrayList<RoomAppliance> appliances ;
    ArrayList<RoomDetails> roomList;
    SimpleArcDialog mDialog;
    String finalApplianceId="";
    String finalApplianceName="";
    String applianceId = null;
    ArrayList<RemoteDetails> remoteList;
    AlertDialog.Builder remoteBuilder;
    String applianceName=null;

    boolean[] ledKeySelection = new boolean[24];

    String[] moodONRemoteCommand;
    String[] moodOFFRemoteCommand;


    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState)
    {
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_mode_details);
        localRef=GlobalApplication.firebaseRef;
        mDialog = new SimpleArcDialog(this);
        mDialog.setCancelable(false);
        ArcConfiguration configuration=new ArcConfiguration(this, SimpleArcLoader.STYLE.COMPLETE_ARC);
        mDialog.setConfiguration(configuration);
        if(!isFinishing())
        mDialog.show();
        try
        {


            DatabaseReference roomDetails = localRef.child("rooms").child(Customer.getCustomer().customerId).child("roomdetails");


            roomDetails.addValueEventListener(new ValueEventListener()
            {
                @Override
                public void onDataChange(DataSnapshot snapshot)
                {
                    roomList = new ArrayList<>();
                    for (DataSnapshot roomSnapshot : snapshot.getChildren())
                    {
                        if (!roomSnapshot.getRef().toString().contains("globalOff"))
                        {
                            localRef.child("rooms").child(Customer.getCustomer().customerId).child("roomdetails");
                            String roomType = roomSnapshot.child("roomType").getValue(String.class);
                            String roomName = roomSnapshot.child("roomName").getValue(String.class);
                            String roomId = roomSnapshot.child("roomId").getValue(String.class);
                            String lastMotionDetected=roomSnapshot.child("lastMotionDetected").getValue(String.class);
                            RoomDetails room = new RoomDetails(roomName, roomType, roomId);
                            roomList.add(room);
                        }

                    }
                    if(!isFinishing())
                    mDialog.dismiss();
                    getModeName();

                }

                @Override
                public void onCancelled(DatabaseError DatabaseError) {
                    System.out.println("The read failed: " + DatabaseError.getMessage());
                }
            });
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }
    }
    @Override
    protected void onDestroy()
    {
        super.onDestroy();

        if(mDialog!=null && mDialog.isShowing())
        {
            if(!isFinishing())
            mDialog.dismiss();
        }
    }

    private void getModeName()
    {
        try
        {
            TextView txt_mode_id;
            final EditText edt_mode_name;
            LayoutInflater inflater = (LayoutInflater) getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

            View nameview = inflater.inflate(R.layout.mode_name_layout, null);
            txt_mode_id= (TextView) nameview.findViewById(R.id.txt_auto_mode_id);
            edt_mode_name= (EditText) nameview.findViewById(R.id.edt_txt_mode_name);

            modeId= AutoGeneratedId.autoGenerated_MODE_ID();

            txt_mode_id.setText(modeId);


            AlertDialog.Builder nameAlter = new AlertDialog.Builder(this, R.style.DialogSlideAnim);
            nameAlter.setCancelable(false);
            nameAlter.setView(nameview);
            nameAlter.setTitle("Enter Mood Name");



            nameAlter.setPositiveButton("Next", new DialogInterface.OnClickListener()
            {
                @Override
                public void onClick(DialogInterface dialog, int which)
                {


                    // TODO Auto-generated method stub
                    if (edt_mode_name.getText().length() != 0)
                    {
                        List<Mode> nameList = ModeDataHelper.getAllModes();
                        int len = nameList.size();
                        if (len != 0)
                        {
                            int result = validateModeName(edt_mode_name.getText().toString(), nameList);
                            if (result != 0)
                            {
                                Toast.makeText(getApplicationContext(), "Mood Name Is Already Exists", Toast.LENGTH_SHORT).show();
                                getModeName();
                            } else {
                                modeName = edt_mode_name.getText().toString();
                                getRoomList();

                            }
                        } else {
                            modeName = edt_mode_name.getText().toString();
                            getRoomList();

                        }


                    } else {
                        Toast.makeText(getApplicationContext(), " Mood Name Is Empty", Toast.LENGTH_SHORT).show();
                    }

                }

            });

            nameAlter.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which)
                {
                    startActivity(new Intent(NewModeDetailsActivity.this,HomeActivity.class));
                    dialog.dismiss();

                }
            });
            AlertDialog nameDialog = nameAlter.create();
            nameDialog.show();
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }


    }

    private void getRoomList()
    {
        modeRoomId = "";
        final RadioGroup radioGroup;
        RadioGroup.LayoutParams rprms;

        LayoutInflater inflater = (LayoutInflater) getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        View view = inflater.inflate(R.layout.mode_room_layout, null);
        radioGroup= (RadioGroup) view.findViewById(R.id.mode_radio_group);
        //final RadioButton[] radioButtons = new RadioButton[roomList.size()];
        radioGroup.setOrientation(LinearLayout.VERTICAL);
        for(int z=0;z<roomList.size();z++)
        {

           /* RadioButton rb=new RadioButton(this);
            rb.setText(roomList.get(z).getRoomName());
            rb.setId(z);
            rprms= new RadioGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            radioGroup.addView(rb,rprms);*/


            RadioButton rb = new RadioButton(this);
            rb.setText(roomList.get(z).getRoomName());
            rb.setId(z);
            rb.setTextColor(getResources().getColor(R.color.white));
            rb.setPadding(5, 5, 5, 5);
            rb.setButtonDrawable(R.drawable.radio_btn);

            rprms = new RadioGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            radioGroup.addView(rb, rprms);
           /* radioButtons[z]=new RadioButton(this);
            String mrn = roomList.get(z).getRoomName();
            radioButtons[z].setText(mrn);
            radioGroup.addView(radioButtons[z]);*/
        }

        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener()
        {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId)
            {
                modeRoomId = "0"+String.valueOf(checkedId+1);

                modeRoomName=roomList.get(checkedId).getRoomName();


                getApplianceList(modeRoomId);
                getRemoteList();
                for (int k = 0; k < radioGroup.getChildCount(); k++) {
                    radioGroup.getChildAt(k).setEnabled(false);
                }


            }
        });


        final AlertDialog.Builder roomListAlert = new AlertDialog.Builder(this, R.style.DialogSlideAnim);
        roomListAlert.setTitle("Select Room In Which You Want Create Mood");
        roomListAlert.setView(view);


        roomListAlert.setPositiveButton("OK", new DialogInterface.OnClickListener()
        {
            @Override
            public void onClick(DialogInterface dialog, int which)
            {

                if (radioGroup.getCheckedRadioButtonId() != -1) {

                    getAppliances(appliances);
                } else {
                    Toast.makeText(NewModeDetailsActivity.this, "Please Select Room First", Toast.LENGTH_SHORT).show();
                    getRoomList();
                }

             /*   if(!modeRoomId.equals("")){
                    getAppliances(appliances);
                }else {
                    Toast.makeText(NewModeDetailsActivity.this, "Plase Select Room", Toast.LENGTH_SHORT).show();
                }
*/
            }
        });
        roomListAlert.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which)
            {
                for (int k = 0; k < radioGroup.getChildCount(); k++) {
                    radioGroup.getChildAt(k).setEnabled(true);
                }
                getModeName();

            }
        });

        roomListAlert.show();



        Toast.makeText(NewModeDetailsActivity.this, "getRoomName", Toast.LENGTH_SHORT).show();

    }


    public void getRemoteList(){
        remoteList = new ArrayList<RemoteDetails>();
        try{

            DatabaseReference remoteDbRef = GlobalApplication.firebaseRef.child("remote").child(Customer.getCustomer().customerId);
            remoteDbRef.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(DataSnapshot dataSnapshot) {

                    if(dataSnapshot != null){
                        for(DataSnapshot remoteSnap : dataSnapshot.getChildren()){

                            RemoteDetails remote = remoteSnap.getValue(RemoteDetails.class);
                            remote.setId(remoteSnap.getKey());
                            remoteList.add(remote);

                        }
                    }
                }

                @Override
                public void onCancelled(DatabaseError databaseError) {


                }
            });

        }catch (Exception e){

        }
    }

    private void getApplianceList(final String moodRoomId)
    {
        if(!isFinishing())
        mDialog.show();
        DatabaseReference roomDetails = localRef.child("rooms").child(Customer.getCustomer().customerId).child("roomdetails");

        roomDetails.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot snapshot) {
                appliances = new ArrayList<>();
                for (DataSnapshot roomSnapshot : snapshot.getChildren()) {
                    //Getting each room
                    String roomId = roomSnapshot.child("roomId").getValue(String.class);
                    if (roomId != null && roomId.equals(moodRoomId)) {
                        for (DataSnapshot type : roomSnapshot.getChildren()) {
                            for(DataSnapshot slave : type.getChildren()) {
                                if (slave.getRef().toString().contains("appliance")) {
                                    for (DataSnapshot applianc : slave.getChildren()) {

                                        RoomAppliance roomAppliance = applianc.getValue(RoomAppliance.class);
                                        appliances.add(roomAppliance);

                                    }
                                    if (!isFinishing())
                                        mDialog.dismiss();
                                    //getAppliances(appliances);

                                    ///1 sep    My side
                                    // break;
                                }
                            }
                        }
                    }
                }
                if(!isFinishing())

                mDialog.dismiss();


            }

            @Override
            public void onCancelled(DatabaseError DatabaseError) {
                System.out.println("The read failed: " + DatabaseError.getMessage());
            }
        });


    }

    private void getAppliances(List<RoomAppliance>appliancesList)
    {

        finalApplianceId = "";
        finalApplianceName = "";
        Toast.makeText(NewModeDetailsActivity.this, "getApplinces", Toast.LENGTH_SHORT).show();
        int i=appliancesList.size();


        CharSequence[] item = new CharSequence[i];
        boolean seleted[] = new boolean[appliancesList.size()];
        for(int j=0 ; j<appliancesList.size() ; j++){
            seleted[j] = false;
        }

        for (int g = 0; g < appliancesList.size(); g++)
        {
            RoomAppliance app = appliancesList.get(g);
            String name = app.getApplianceName();
            item[g] = name;
        }

        AlertDialog.Builder builder = new AlertDialog.Builder(NewModeDetailsActivity.this, R.style.DialogSlideAnim);

        builder.setTitle("Select Appliances");


        builder.setMultiChoiceItems(item, seleted, new DialogInterface.OnMultiChoiceClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which, boolean isChecked) {

                RoomAppliance ra = appliances.get(which);
                applianceId = ra.getId();
                applianceName = ra.getApplianceName();
                if (isChecked)
                {
                    slaveId = ra.getSlaveId();
                    finalApplianceId = finalApplianceId + slaveId+applianceId + ",";
                    finalApplianceName = finalApplianceName + applianceName + ",";

                } else
                {


                    finalApplianceId= finalApplianceId.replace(slaveId+applianceId+"," , "");
                    finalApplianceName=finalApplianceName.replace(applianceName+"," ,"");


                }
                Toast.makeText(NewModeDetailsActivity.this, "" + which, Toast.LENGTH_SHORT).show();

            }
        });
        builder.setPositiveButton("OK", new DialogInterface.OnClickListener()
        {
            @Override
            public void onClick(DialogInterface dialog, int which)
            {

                getIRRemoteDialog(modeRoomId,"Select Mood ON Keys");
                dialog.dismiss();


                /*ModeDataHelper.addMode(modeRoomId,modeName ,finalApplianceId, finalApplianceName, "false", false,0, 0, 5,modeRoomName,
                        modeRoomId, slaveId);

                DatabaseReference modeRef = localRef.child("mode").child(Customer.getCustomer().customerId).child("modeDetails").child(modeId);
                Map<String, Object> modeDetails = new HashMap<>();
                modeDetails.put("moodName", modeName);
                modeDetails.put("modeId", modeId);
                modeDetails.put("applianceId",finalApplianceId);
                modeDetails.put("applianceName",finalApplianceName);
                modeDetails.put("state", false);
                modeDetails.put("dimmable", false);
                modeDetails.put("toggle", 0);
                modeDetails.put("dimableToggle", 0);
                modeDetails.put("dimableValue", 0);
                modeDetails.put("roomName",modeRoomName);
                modeDetails.put("roomId", modeRoomId);
                modeDetails.put("slaveId", slaveId);
                modeDetails.put("offAppliances", "");
                modeRef.setValue(modeDetails);
                finish();
                startActivity(new Intent(NewModeDetailsActivity.this, HomeActivity.class));

                DatabaseReference modeCountDetails = localRef.child("mode").child(Customer.getCustomer().customerId).child("modeCountDetails").child("modeCount");
                updateCount(modeCountDetails, 1);*/


            }
        });
        builder.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                getRoomList();

            }
        });
        builder.show();

    }


    public void getIRRemoteDialog(final String modeRoomId,final String title){


        Toast.makeText(NewModeDetailsActivity.this, "getIRKeys", Toast.LENGTH_SHORT).show();
        final ArrayList<RemoteDetails> roomWiseRemoteList = new ArrayList<RemoteDetails>();

        for(int i = 0;i<remoteList.size() ; i++){

            if(remoteList.get(i).getRoomId() != null && remoteList.get(i).getRoomId().equals(modeRoomId)){

                roomWiseRemoteList.add(remoteList.get(i));
            }
        }

        AlertDialog.Builder builder = new AlertDialog.Builder(NewModeDetailsActivity.this, R.style.DialogSlideAnim);
        builder.setCancelable(false);

        if(roomWiseRemoteList.size() == 0){


            builder.setTitle("Select Mood ON Keys");
            builder.setMessage("No Remote Available In Room");
            builder.setNeutralButton("Finish", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialogInterface, int i) {
                    addMoodes();
                }
            });

        }else {


            if(title.equals("Select Mood OFF Keys")){

                moodOFFRemoteCommand = new String[roomWiseRemoteList.size()];

            }else if(title.equals("Select Mood ON Keys")){

                moodONRemoteCommand = new String[roomWiseRemoteList.size()];
            }

            int i = roomWiseRemoteList.size();

            final String[] item = new String[i];

            boolean[] seleted = new boolean[roomWiseRemoteList.size()];
            for(int j=0 ; j<roomWiseRemoteList.size();j++){
                seleted[j] = false;
            }

            for (int g = 0; g < roomWiseRemoteList.size(); g++) {
                RemoteDetails app = roomWiseRemoteList.get(g);
                String name = app.getRemoteType();
                item[g] = name;
            }


            builder.setTitle(title);


            builder.setMultiChoiceItems(item, seleted, new DialogInterface.OnMultiChoiceClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which, boolean isChecked) {

                    if (isChecked) {

                        getRemoteKeys(item[which],roomWiseRemoteList.get(which),which,title);


                    } else {

                        if(title.equals("Select Mood OFF Keys")){

                            moodOFFRemoteCommand[which] = "";
                        }else if(title.equals("Select Mood ON Keys")){

                            moodONRemoteCommand[which] = "";
                        }


                    }
                    Toast.makeText(NewModeDetailsActivity.this, "" + which, Toast.LENGTH_SHORT).show();

                }
            });

            String actionKey = null;
            if(title.equals("Select Mood OFF Keys")){
                actionKey = "OK";
            }else if(title.equals("Select Mood ON Keys")){
                actionKey = "NEXT";
            }


            builder.setPositiveButton(actionKey, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {

                    if(title.equals("Select Mood OFF Keys")){

                        addMoodes();

                    }else if(title.equals("Select Mood ON Keys")){

                        getIRRemoteDialog(modeRoomId,"Select Mood OFF Keys");

                    }

                    dialog.dismiss();


                }
            });
            builder.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();

                    if(title.equals("Select Mood ON Keys")){
                        getAppliances(appliances);
                    }else if(title.equals("Select Mood OFF Keys")){

                        getIRRemoteDialog(modeRoomId,"Select Mood OFF Keys");

                    }


                }
            });



        }


        builder.show();


    }


    public void addMoodes(){

        String keyONList = "";
        String keyOFFList = "";

        if(moodONRemoteCommand != null && moodOFFRemoteCommand!= null ){

            for(int i = 0; i<moodONRemoteCommand.length ; i++){
                if(moodONRemoteCommand[i] != null && !moodONRemoteCommand[i].equals("")){

                    keyONList = keyONList +moodONRemoteCommand[i];
                }
            }

            for(int i = 0; i<moodOFFRemoteCommand.length ; i++){
                if(moodOFFRemoteCommand[i] != null && !moodOFFRemoteCommand[i].equals("")){

                    keyOFFList = keyOFFList +moodOFFRemoteCommand[i];
                }
            }

        }

        ModeDataHelper.addMode(modeId, modeName, finalApplianceId, finalApplianceName, "false", false, 0, 0, 5, modeRoomName,
                modeRoomId, slaveId/*,"",keyONList,keyOFFList*/);

        DatabaseReference modeRef = localRef.child("mode").child(Customer.getCustomer().customerId).child("modeDetails").child(modeId);
        Map<String, Object> modeDetails = new HashMap<>();
        modeDetails.put("moodName", modeName);
        modeDetails.put("modeId", modeId);
        modeDetails.put("applianceId", finalApplianceId);
        modeDetails.put("applianceName", finalApplianceName);
        modeDetails.put("state", false);
        modeDetails.put("dimmable", false);
        modeDetails.put("toggle", 0);
        modeDetails.put("dimableToggle", 0);
        modeDetails.put("dimableValue", 0);
        modeDetails.put("roomName", modeRoomName);
        modeDetails.put("roomId", modeRoomId);
        modeDetails.put("slaveId", slaveId);
        modeDetails.put("offAppliances", "");
        modeDetails.put("moodONIRCommand",keyONList);
        modeDetails.put("moodOFFIRCommand",keyOFFList);
        modeRef.setValue(modeDetails);
        finish();
        startActivity(new Intent(NewModeDetailsActivity.this, HomeActivity.class));

        DatabaseReference modeCountDetails = localRef.child("mode").child(Customer.getCustomer().customerId).child("modeCountDetails").child("modeCount");
        updateCount(modeCountDetails, 1);

    }


    public void getRemoteKeys(String remoteType, final RemoteDetails remoteDetails, final int index,final String title){
        String[] item = {""};

        if(remoteType.equals("MOOD LIGHT")){
            // Mood Keys

            //item = GlobalApplication.MOOD_REMOTE_KEYS;

            openConfigView( remoteDetails,index,title);


            //item = GlobalApplication.DVD_REMOTE_KEYS;

        }else if(remoteType.equals("AC")){


            item = GlobalApplication.AC_REMOTE_KEYS;

            item = changeRemoteKeys(remoteDetails.getIRId(),remoteDetails.getRemoteId(),item);

            selectRemoteKey(item,remoteDetails,index,title);

        }else if(remoteType.equals("DVD")){
            item = GlobalApplication.DVD_REMOTE_KEYS;
            item = changeRemoteKeys(remoteDetails.getIRId(),remoteDetails.getRemoteId(),item);
            selectRemoteKey(item,remoteDetails,index,title);

        }else if(remoteType.equals("PROJECTOR")){
            item = GlobalApplication.PROJECTOR_REMOTE_KEYS;
            item = changeRemoteKeys(remoteDetails.getIRId(),remoteDetails.getRemoteId(),item);
            selectRemoteKey(item,remoteDetails,index,title);

        }else if(remoteType.equals("TV")){
            item = GlobalApplication.TV_REMOTE_KEYS;
            item = changeRemoteKeys(remoteDetails.getIRId(),remoteDetails.getRemoteId(),item);
            selectRemoteKey(item,remoteDetails,index,title);

        }else if(remoteType.equals("SETTOP BOX")){
            item = GlobalApplication.SETTOPBOX_REMOTE_KEYS;
            item = changeRemoteKeys(remoteDetails.getIRId(),remoteDetails.getRemoteId(),item);
            selectRemoteKey(item,remoteDetails,index,title);

        }

    }



    private void openConfigView(final RemoteDetails remoteDetails,final int index,final String title) {

        remoteBuilder = new AlertDialog.Builder(NewModeDetailsActivity.this, R.style.DialogSlideAnim);
        remoteBuilder.setTitle("Select Remote Keys");
        final FrameLayout frameView = new FrameLayout(this);
        remoteBuilder.setView(frameView);
        ledKeySelection = new boolean[24];


        if(title.equals("Select Mood ON Keys")){
            moodONRemoteCommand[index] = "";

        }else if(title.equals("Select Mood OFF Keys")){
            moodOFFRemoteCommand[index] = "";
        }

        remoteBuilder.setPositiveButton("Confirm", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {



                    if(title.equals("Select Mood ON Keys")){

                        for(int i = 0; i<ledKeySelection.length ; i++){

                            if(ledKeySelection[i]){

                                if(i <10){
                                    moodONRemoteCommand[index] = moodONRemoteCommand[index]+"I012"+remoteDetails.getIRId()+"1"+remoteDetails.getRemoteId()+"0"+i+"00F"+",";

                                }else {

                                    moodONRemoteCommand[index] = moodONRemoteCommand[index]+"I012"+remoteDetails.getIRId()+"1"+remoteDetails.getRemoteId()+i+"00F"+",";
                                }


                            }
                        }

                    }else if(title.equals("Select Mood OFF Keys")){

                        for(int i = 0; i<ledKeySelection.length ; i++){

                            if(ledKeySelection[i]){

                                if(i <10){
                                    moodOFFRemoteCommand[index] = moodOFFRemoteCommand[index]+"I012"+remoteDetails.getIRId()+"1"+remoteDetails.getRemoteId()+"0"+i+"00F"+",";

                                }else {

                                    moodOFFRemoteCommand[index] = moodOFFRemoteCommand[index]+"I012"+remoteDetails.getIRId()+"1"+remoteDetails.getRemoteId()+i+"00F"+",";
                                }


                            }
                        }

                    }

                dialog.dismiss();


            }
        });
        remoteBuilder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {

                if(title.equals("Select Mood ON Keys")){
                    moodONRemoteCommand[index] = "";
                }else if(title.equals("Select Mood OFF Keys")){
                    moodOFFRemoteCommand[index] = "";
                }

                dialog.dismiss();

            }
        });


        final AlertDialog alertDialog = remoteBuilder.create();
        alertDialog.setCancelable(false);
        LayoutInflater inflater = alertDialog.getLayoutInflater();
        View dialoglayout = inflater.inflate(R.layout.rgb_led_strip_remote_layout1, frameView);
        alertDialog.show();


        //Power Button
        final Button moodLight_power_on = (Button)dialoglayout.findViewById(R.id.id_01);
        moodLight_power_on.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(!ledKeySelection[Integer.parseInt(moodLight_power_on.getTag().toString())]){

                    moodLight_power_on.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_power_on.getTag().toString())] = true;
                }else {

                    ledKeySelection[Integer.parseInt(moodLight_power_on.getTag().toString())] = false;
                    moodLight_power_on.setBackgroundColor(getResources().getColor(R.color.red_1));

                }

            }
        });



        //Power OFF id 01
        final Button moodLight_power_off = (Button)dialoglayout.findViewById(R.id.id_02);
        moodLight_power_off.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(!ledKeySelection[Integer.parseInt(moodLight_power_on.getTag().toString())]){

                    moodLight_power_off.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_power_on.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_power_on.getTag().toString())] = false;
                    moodLight_power_off.setBackgroundColor(getResources().getColor(R.color.black17));

                }


            }
        });


        //Power id 02
        final Button moodLight_02 = (Button)dialoglayout.findViewById(R.id.id_03);
        moodLight_02.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(!ledKeySelection[Integer.parseInt(moodLight_02.getTag().toString())]){

                    moodLight_02.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_02.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_02.getTag().toString())] = false;
                    moodLight_02.setBackgroundColor(getResources().getColor(R.color.white17));

                }



            }
        });


        //Power id 03
        final Button moodLight_03 = (Button)dialoglayout.findViewById(R.id.id_04);
        moodLight_03.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {


                if(!ledKeySelection[Integer.parseInt(moodLight_03.getTag().toString())]){

                    moodLight_03.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_03.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_03.getTag().toString())] = false;
                    moodLight_03.setBackgroundColor(getResources().getColor(R.color.white17));

                }

            }
        });



        //Power id 04
        final Button moodLight_04 = (Button)dialoglayout.findViewById(R.id.id_05);
        moodLight_04.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(!ledKeySelection[Integer.parseInt(moodLight_04.getTag().toString())]){

                    moodLight_power_on.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    moodLight_04.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_04.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_04.getTag().toString())] = false;
                    moodLight_04.setBackgroundColor(getResources().getColor(R.color.red_1));

                }


            }
        });


        //Power id 05
        final Button moodLight_05 = (Button)dialoglayout.findViewById(R.id.id_06);
        moodLight_05.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(!ledKeySelection[Integer.parseInt(moodLight_05.getTag().toString())]){

                    moodLight_05.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_05.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_05.getTag().toString())] = false;
                    moodLight_05.setBackgroundColor(getResources().getColor(R.color.green_2));

                }


            }
        });




        //Power id 06
        final Button moodLight_06 = (Button)dialoglayout.findViewById(R.id.id_07);
        moodLight_06.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(!ledKeySelection[Integer.parseInt(moodLight_06.getTag().toString())]){

                    moodLight_06.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_06.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_06.getTag().toString())] = false;
                    moodLight_06.setBackgroundColor(getResources().getColor(R.color.blue_3));

                }


            }
        });




        //Power id 07
        final Button moodLight_07 = (Button)dialoglayout.findViewById(R.id.id_08);
        moodLight_07.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(!ledKeySelection[Integer.parseInt(moodLight_07.getTag().toString())]){

                    moodLight_07.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_07.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_07.getTag().toString())] = false;
                    moodLight_07.setBackgroundColor(getResources().getColor(R.color.white17));

                }


            }
        });



        //Power id 08
        final Button moodLight_08 = (Button)dialoglayout.findViewById(R.id.id_09);
        moodLight_08.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(!ledKeySelection[Integer.parseInt(moodLight_08.getTag().toString())]){

                    moodLight_08.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_08.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_08.getTag().toString())] = false;
                    moodLight_08.setBackgroundColor(getResources().getColor(R.color.appliance_name_sub_header));

                }


            }
        });



        //Power id 09
        final Button moodLight_09 = (Button)dialoglayout.findViewById(R.id.id_10);
        moodLight_09.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {


                if(!ledKeySelection[Integer.parseInt(moodLight_09.getTag().toString())]){

                    moodLight_09.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_09.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_09.getTag().toString())] = false;
                    moodLight_09.setBackgroundColor(getResources().getColor(R.color.light_blue_6));

                }

            }
        });



        //Power id 10
        final Button moodLight_10 = (Button)dialoglayout.findViewById(R.id.id_11);
        moodLight_10.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!ledKeySelection[Integer.parseInt(moodLight_10.getTag().toString())]){

                    moodLight_10.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_10.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_10.getTag().toString())] = false;
                    moodLight_10.setBackgroundColor(getResources().getColor(R.color.light_green_5));

                }
            }
        });


        //Power id 11
        final Button moodLight_11 = (Button)dialoglayout.findViewById(R.id.id_12);
        moodLight_11.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(!ledKeySelection[Integer.parseInt(moodLight_11.getTag().toString())]){

                    moodLight_11.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_11.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_11.getTag().toString())] = false;
                    moodLight_11.setBackgroundColor(getResources().getColor(R.color.light_red_4));

                }

            }
        });



        //Power id 12
        final Button moodLight_12 = (Button)dialoglayout.findViewById(R.id.id_13);
        moodLight_12.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(!ledKeySelection[Integer.parseInt(moodLight_12.getTag().toString())]){

                    moodLight_12.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_12.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_12.getTag().toString())] = false;
                    moodLight_12.setBackgroundColor(getResources().getColor(R.color._7));

                }

            }
        });


        //Power id 13
        final Button moodLight_13 = (Button)dialoglayout.findViewById(R.id.id_14);
        moodLight_13.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!ledKeySelection[Integer.parseInt(moodLight_13.getTag().toString())]){


                    moodLight_13.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_13.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_13.getTag().toString())] = false;
                    moodLight_13.setBackgroundColor(getResources().getColor(R.color._8));

                }


            }
        });


        //Power id 14
        final Button moodLight_14 = (Button)dialoglayout.findViewById(R.id.id_15);
        moodLight_14.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!ledKeySelection[Integer.parseInt(moodLight_14.getTag().toString())]){

                    moodLight_14.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_14.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_14.getTag().toString())] = false;
                    moodLight_14.setBackgroundColor(getResources().getColor(R.color._9));

                }


            }
        });


        //Power id 15
        final Button moodLight_15 = (Button)dialoglayout.findViewById(R.id.id_16);
        moodLight_15.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!ledKeySelection[Integer.parseInt(moodLight_15.getTag().toString())]){

                    moodLight_15.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_15.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_15.getTag().toString())] = false;
                    moodLight_15.setBackgroundColor(getResources().getColor(R.color.appliance_name_sub_header));
                }


            }
        });


        //Power id 16
        final Button moodLight_16 = (Button)dialoglayout.findViewById(R.id.id_17);
        moodLight_16.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(!ledKeySelection[Integer.parseInt(moodLight_16.getTag().toString())]){

                    moodLight_16.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_16.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_16.getTag().toString())] = false;
                    moodLight_16.setBackgroundColor(getResources().getColor(R.color.appliance_name_sub_header));

                }

            }
        });


        //Power id 17
        final Button moodLight_17 = (Button)dialoglayout.findViewById(R.id.id_18);
        moodLight_17.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(!ledKeySelection[Integer.parseInt(moodLight_17.getTag().toString())]){

                    moodLight_17.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_17.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_17.getTag().toString())] = false;
                    moodLight_17.setBackgroundColor(getResources().getColor(R.color._12));


                }

            }
        });



        //Power id 18
        final Button moodLight_18 = (Button)dialoglayout.findViewById(R.id.id_19);
        moodLight_18.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!ledKeySelection[Integer.parseInt(moodLight_18.getTag().toString())]){

                    moodLight_18.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_18.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_18.getTag().toString())] = false;
                    moodLight_18.setBackgroundColor(getResources().getColor(R.color._11));

                }


            }
        });


        //Power id 19
        final Button moodLight_19 = (Button)dialoglayout.findViewById(R.id.id_20);
        moodLight_19.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!ledKeySelection[Integer.parseInt(moodLight_19.getTag().toString())]){

                    moodLight_19.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_19.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_19.getTag().toString())] = false;
                    moodLight_19.setBackgroundColor(getResources().getColor(R.color._10));

                }


            }
        });


        //Power id 20
        final Button moodLight_20 = (Button)dialoglayout.findViewById(R.id.id_21);
        moodLight_20.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!ledKeySelection[Integer.parseInt(moodLight_20.getTag().toString())]){

                    moodLight_20.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_20.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_20.getTag().toString())] = false;
                    moodLight_20.setBackgroundColor(getResources().getColor(R.color._13));

                }

            }
        });


        //Power id 21
        final Button moodLight_21 = (Button)dialoglayout.findViewById(R.id.id_22);
        moodLight_21.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!ledKeySelection[Integer.parseInt(moodLight_21.getTag().toString())]){

                    moodLight_21.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_21.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_21.getTag().toString())] = false;
                    moodLight_21.setBackgroundColor(getResources().getColor(R.color._14));

                }

            }
        });


        //Power id 22
        final Button moodLight_22 = (Button)dialoglayout.findViewById(R.id.id_23);
        moodLight_22.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!ledKeySelection[Integer.parseInt(moodLight_22.getTag().toString())]){

                    moodLight_22.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_22.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_22.getTag().toString())] = false;
                    moodLight_22.setBackgroundColor(getResources().getColor(R.color._15));

                }


            }
        });



        //Power id 23
        final Button moodLight_23 = (Button)dialoglayout.findViewById(R.id.id_24);
        moodLight_23.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!ledKeySelection[Integer.parseInt(moodLight_23.getTag().toString())]){

                    moodLight_23.setBackgroundColor(getResources().getColor(android.R.color.transparent));
                    ledKeySelection[Integer.parseInt(moodLight_23.getTag().toString())] = true;
                }else {
                    ledKeySelection[Integer.parseInt(moodLight_23.getTag().toString())] = false;
                    moodLight_23.setBackgroundColor(getResources().getColor(R.color.appliance_name_sub_header));

                }


            }
        });



       /* final Button confirm = (Button)dialoglayout.findViewById(R.id.btn_ok);
            confirm.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                }
            });*/
    }




    public void selectRemoteKey(String item[],final RemoteDetails remoteDetails, final int index,final String title){

        boolean[] seleted = new boolean[item.length];
        for(int j=0 ; j<item.length;j++){
            seleted[j] = false;
        }


        AlertDialog.Builder builder = new AlertDialog.Builder(NewModeDetailsActivity.this, R.style.DialogSlideAnim);
        builder.setCancelable(false);
        builder.setTitle("Select Remote Keys");

        if(title.equals("Select Mood ON Keys")){
            moodONRemoteCommand[index] = "";

        }else if(title.equals("Select Mood OFF Keys")){
            moodOFFRemoteCommand[index] = "";
        }


        builder.setMultiChoiceItems(item, seleted, new DialogInterface.OnMultiChoiceClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which, boolean isChecked) {

                if (isChecked) {
                    if(title.equals("Select Mood ON Keys")){

                        if(which <10){
                            moodONRemoteCommand[index] = moodONRemoteCommand[index] + "I012"+remoteDetails.getIRId()+"1"+remoteDetails.getRemoteId()+"0"+which+"00F"+",";

                        }else {

                            moodONRemoteCommand[index] = moodONRemoteCommand[index] + "I012"+remoteDetails.getIRId()+"1"+remoteDetails.getRemoteId()+which+"00F"+",";
                        }
                    }else if(title.equals("Select Mood OFF Keys")){

                        if(which <10){
                            moodOFFRemoteCommand[index] = moodOFFRemoteCommand[index] + "I012"+remoteDetails.getIRId()+"1"+remoteDetails.getRemoteId()+"0"+which+"00F"+",";

                        }else {

                            moodOFFRemoteCommand[index] = moodOFFRemoteCommand[index] + "I012"+remoteDetails.getIRId()+"1"+remoteDetails.getRemoteId()+which+"00F"+",";
                        }
                    }


                } else {

                    if(title.equals("Select Mood ON Keys")){

                        if(which <10){
                            moodONRemoteCommand[index] = moodONRemoteCommand[index].replace("I012"+remoteDetails.getIRId()+"1"+remoteDetails.getRemoteId()+"0"+which+"00F"+",","");

                        }else {

                            moodONRemoteCommand[index] = moodONRemoteCommand[index].replace("I012"+remoteDetails.getIRId()+"1"+remoteDetails.getRemoteId()+which+"00F"+",","");
                        }

                    }else if(title.equals("Select Mood OFF Keys")){

                        if(which <10){
                            moodOFFRemoteCommand[index] = moodOFFRemoteCommand[index].replace("I012"+remoteDetails.getIRId()+"1"+remoteDetails.getRemoteId()+"0"+which+"00F"+",","");

                        }else {

                            moodOFFRemoteCommand[index] = moodOFFRemoteCommand[index].replace("I012"+remoteDetails.getIRId()+"1"+remoteDetails.getRemoteId()+which+"00F"+",","");
                        }

                    }



                }
                Toast.makeText(NewModeDetailsActivity.this, "" + which, Toast.LENGTH_SHORT).show();

            }
        });
        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                dialog.dismiss();
            }
        });
        builder.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                if(title.equals("Select Mood ON Keys")){
                    moodONRemoteCommand[index] = "";
                }else if(title.equals("Select Mood OFF Keys")){
                    moodOFFRemoteCommand[index] = "";
                }



                //getAppl(modeRoomId);
                //  getAppliances(appliances);

            }
        });
        builder.show();


    }




    public String[] changeRemoteKeys(String irID,String remoteId,String[] item){

        List<RemoteKeyDetails> remoteKeyss= RemoteKeysDataHelper.getRemoteKeys(irID,remoteId);
        for(int i = 0; i<remoteKeyss.size() ; i++){

            for(int j = 0; j<item.length ; j++){

                if(Integer.parseInt(remoteKeyss.get(i).getOldTag()) == j){
                    item[j] = remoteKeyss.get(i).getNewKey();
                    break;
                }
            }
        }

        return item;

    }



    private void updateCount(DatabaseReference modeCountDetails, final int i)
    {
        try {
            modeCountDetails.runTransaction(new Transaction.Handler() {
                @Override
                public Transaction.Result doTransaction(MutableData currentData) {
                    if (currentData.getValue() == null) {
                        currentData.setValue(1);
                    } else {
                        currentData.setValue((Long) currentData.getValue() + i);
                    }
                    return Transaction.success(currentData); //we can also abort by calling Transaction.abort()
                }

                @Override
                public void onComplete(DatabaseError DatabaseError, boolean committed, DataSnapshot currentData) {
                    //This method will be called once with the results of the transaction.


                }
            });
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }

    }

    private int validateModeName(String s, List<Mode> nameList)
    {
        for(int p=0;p<nameList.size();p++)
        {
            Mode mode = nameList.get(p);
            String name = mode.moodName;
            if(name.equals(s))
            {
                return 1;
            }else
            {
                continue;
            }

        }
        return 0;
    }
}
