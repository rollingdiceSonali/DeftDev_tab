package com.rollingdice.deft.android.tab.user;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v7.app.NotificationCompat;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.SparseBooleanArray;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.CheckedTextView;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.activeandroid.ActiveAndroid;
import com.activeandroid.query.Delete;
import com.activeandroid.query.Select;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.MutableData;
import com.google.firebase.database.Transaction;
import com.google.firebase.database.ValueEventListener;

import com.rollingdice.deft.android.tab.GlobalApplication;
import com.rollingdice.deft.android.tab.NotificationBroadCastReceiver;
import com.rollingdice.deft.android.tab.R;
import com.rollingdice.deft.android.tab.RecyclerItemClickListenerAndDetector;
import com.rollingdice.deft.android.tab.datahelper.AutoGeneratedId;
import com.rollingdice.deft.android.tab.datahelper.SceneConfigDataHelper;
import com.rollingdice.deft.android.tab.datahelper.SceneDataHelper;
import com.rollingdice.deft.android.tab.model.CurtainDetails;
import com.rollingdice.deft.android.tab.model.Customer;
import com.rollingdice.deft.android.tab.model.Room;
import com.rollingdice.deft.android.tab.model.RoomAppliance;
import com.rollingdice.deft.android.tab.model.Scene;
import com.rollingdice.deft.android.tab.model.SceneDetails;
import com.rollingdice.deft.android.tab.model.Scene_Configuration;
import com.rollingdice.deft.android.tab.model.GateControllerDetails;
import com.leo.simplearcloader.ArcConfiguration;
import com.leo.simplearcloader.SimpleArcDialog;
import com.leo.simplearcloader.SimpleArcLoader;
import com.rollingdice.deft.android.tab.model.Sensor;
import com.rollingdice.deft.android.tab.model.SensorDetail;

import org.adw.library.widgets.discreteseekbar.DiscreteSeekBar;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

import static java.lang.Integer.parseInt;

/**
 * Created by Prajakta on 2/23/2016.
 */
public class UserSchedularActivity extends Activity
{
    public static boolean Repeating =false;
    private RecyclerView mRecyclerView;
    private MyRecyclerViewAdapter mAdapter;
    private String slave_Id ;

    ExpandableListView expandableListViewAppliance,expandableListViewCurtain,expandableListViewgateController,expandableListViewForSensor;

    ExpandableListAdapter expandableListApplianceAdapter;
    ExpandableCurtainListAdapter expandableListCurtainAdapter;
    ExpandableGateControllerListAdapter expandableGateControllerListAdapter;
    ExpandableSensorListAdapter expandableSensorListAdapter;

    List expandableListTitle;

    HashMap<String, ArrayList<RoomAppliance>>roomApplianceList;
    HashMap<String,ArrayList<SensorDetail>> roomWiseSensorList;
    HashMap<String,ArrayList<CurtainDetails>>roomWiseCurtainList;
    HashMap<String,ArrayList<GateControllerDetails>>roomWisegateControllerList;

    private String OK_ACTION, CANCEL_ACTION;
    public static final String notificationId = "NOTIFICATION_ID";
    public static final int NOTIFICATION_ID = (int) System.currentTimeMillis();
    NotificationCompat.Builder builder;
    NotificationManager notificationManager;

    public static Context appcontext;
    TextView txt_scene_id, txt_auto_scene_id, txt_scene_name;
    EditText edt_scene_name;
    TimePicker tp;
    Calendar startcal, endcal;
    String Scene_Id, Scene_Name, Start_Time, End_Time, app_Name, appEndTime, startTimeMinute;


    private static String LOG_TAG = "CardViewActivity";
    private String room_Name;
    private String appStartTime;
    private String startTimeHour;
    private String endTimeHour, endTimeMinute;
    AlertDialog.Builder timeAlert;
    private ArrayList<Integer> selectedApp;
    DatabaseReference localRef;
    private String appstartTimeHour, appstartTimeMinute;
    private String appendTimeHour, appendTimeMinute;
    private List<Room> roomList;
    private String roomId;
    private String applinceId;
    private DatabaseReference sceneRef,notificationRef;
    private Calendar appStartcal;
    private ArrayList<RoomAppliance> appliances;
    private ArrayList<SensorDetail> sensor;

    private ListView listView;
    private List<String> selectedDays;
    private String selected;
    private Calendar appEndCal;
    MyAlarmManager myAlarmManager;
    private ArrayList<SceneDetails> sceneDetailsList,sceneList;
    private  ArrayList<CurtainDetails>curtainDetailsList;
    private ArrayList<GateControllerDetails> gateControllerDetailsArrayList;
    private String curtainRoomName,curtainName;

    private String  sensorName , sensorRoomName ,sensorRoomId,sensorId;

    SimpleArcDialog mDialog;
    private RecyclerView.LayoutManager lmSchedular ;

    private CheckBox checkbox;
    private String curtainRoonId;
    private String curtainId;
    String applianceType;
    private int cur_Level;
    private String gcName, gcId;



    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        try {

            requestWindowFeature(Window.FEATURE_NO_TITLE);
            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_user_scene_list);

            appcontext = getApplicationContext();
            localRef = GlobalApplication.firebaseRef;
            myAlarmManager = new MyAlarmManager();


            mDialog = new SimpleArcDialog(this);
            ArcConfiguration configuration=new ArcConfiguration(this, SimpleArcLoader.STYLE.COMPLETE_ARC);
            mDialog.setConfiguration(configuration);
            mDialog.setCancelable(false);
            if(!isFinishing())
                mDialog.show();

            GlobalApplication.isActivated = true;


            OK_ACTION = "com.rollingdice.homeautomatin.tab.user.UserListOfAllScenesActivity.OK_ACTION";
            CANCEL_ACTION = "com.rollingdice.homeautomatin.tab.user.UserListOfAllScenesActivity.CANCEL_ACTION";

            mRecyclerView = (RecyclerView) findViewById(R.id.my_recycler_view);

            roomApplianceList = new HashMap<>();

            roomWiseSensorList = new HashMap<>();

            roomWiseCurtainList=new HashMap<>();

            roomWisegateControllerList=new HashMap<>();
            GlobalApplication.sensorList = new ArrayList<SensorDetail>();



            final DatabaseReference applianceDetails = localRef.child("rooms").child(Customer.getCustomer().customerId).child("roomdetails");

            applianceDetails.addValueEventListener(new ValueEventListener() {
                @Override
                public void onDataChange(DataSnapshot snapshot) {

                    for (DataSnapshot roomSnapshot : snapshot.getChildren()) {
                        if (!roomSnapshot.getRef().toString().contains("globalOff")/* && !(roomSnapshot.getRef().toString().contains("sensors"))*/) {
                            //Getting each room
                            /*if(roomSnapshot.getRef())*/
                            String roomId = roomSnapshot.child("roomId").getValue(String.class);
                            String roomName = roomSnapshot.child("roomName").getValue(String.class);
                            if (roomId != null) {
                                appliances = new ArrayList<>();
                                sensor = new ArrayList<SensorDetail>();

                                for (DataSnapshot type : roomSnapshot.getChildren()) {

                                    if(type.getRef().getKey().equals("sensors")){

                                        for (DataSnapshot sensors : type.getChildren()) {

                                            for(DataSnapshot sId : sensors.getChildren()){
                                                SensorDetail sensorDetail = sId.getValue(SensorDetail.class);
                                                sensor.add(sensorDetail);
                                                GlobalApplication.sensorList.add(sensorDetail);

                                            }
                                        }
                                      /*  SensorDetail sensor1 = type.getValue(SensorDetail.class);
                                         sensor.add(sensor1);*/
                                    }




                                    for(DataSnapshot slave : type.getChildren()) {

                                        if (slave.getRef().toString().contains("appliance")) {
                                            // Getting each appliance
                                            for (DataSnapshot applianc : slave.getChildren()) {
                                                RoomAppliance roomAppliance = applianc.getValue(RoomAppliance.class);
                                                appliances.add(roomAppliance);

                                            }

                                        }
                                    }
                                }
                            }
                            roomApplianceList.put(roomName,appliances);
                            if(sensor.size()!= 0){
                                roomWiseSensorList.put(roomName,sensor);
                            }
                            if(!isFinishing())
                                mDialog.dismiss();
                        }
                    }
                }

                @Override
                public void onCancelled(DatabaseError DatabaseError) {
                    System.out.println("The read failed: " + DatabaseError.getMessage());
                }
            });

            DatabaseReference sceneDetailsRef1 = localRef.child("scene").child(Customer.getCustomer().customerId).child("sceneDetails");
            sceneDetailsRef1.addValueEventListener(new ValueEventListener() {
                @Override
                public void onDataChange(DataSnapshot dataSnapshot) {
                    sceneList = new ArrayList<>();

                }

                @Override
                public void onCancelled(DatabaseError DatabaseError) {

                }
            });




            final DatabaseReference sceneDetailsRef = localRef.child("scene").child(Customer.getCustomer().customerId).child("sceneDetails");

            sceneDetailsRef.addValueEventListener(new ValueEventListener() {
                @Override
                public void onDataChange(DataSnapshot dataSnapshot) {
                    sceneDetailsList = new ArrayList<>();
                    sceneList = new ArrayList<>();

                    for (DataSnapshot sceneId : dataSnapshot.getChildren()) {
                        String id = sceneId.getKey();
                        for (DataSnapshot sceneDetails : sceneId.getChildren()) {
                            String sceneName = sceneId.child("sceneName").getValue(String.class);
                            String startTime = sceneId.child("startTime").getValue(String.class);
                            String endTime = sceneId.child("endTime").getValue(String.class);
                            String days = sceneId.child("listOfDays").getValue(String.class);
                            Integer isActivated = sceneId.child("isActivated").getValue(Integer.class);
                            boolean isRepeating = sceneId.child("isRepeating").getValue(Boolean.class);
                            boolean isAlarmSet = sceneId.child("isAlarmSet").getValue(Boolean.class);


                            if (sceneDetails.getRef().toString().contains("sceneConfigDetails")) {
                                for (DataSnapshot sceneConfigId : sceneDetails.getChildren()) {
                                    String scene_Config_Id = sceneConfigId.getKey();
                                    String appStartTime = sceneConfigId.child("appStartTime").getValue(String.class);
                                    String appEndTime = sceneConfigId.child("appEndTime").getValue(String.class);
                                    String applianceId = sceneConfigId.child("applianceId").getValue(String.class);
                                    String applianceName = sceneConfigId.child("applianceName").getValue(String.class);
                                    String roomId = sceneConfigId.child("roomId").getValue(String.class);
                                    int onPendingIntentId = sceneConfigId.child("onPendingIntentId").getValue(Integer.class);
                                    int offPendingIntentId = sceneConfigId.child("offPendingIntentId").getValue(Integer.class);
                                    String day = sceneConfigId.child("day").getValue(String.class);
                                    String applianceType = sceneConfigId.child("applianceType").getValue(String.class);
                                    int curtainLevel = sceneConfigId.child("curtainLevel").getValue(Integer.class);

                                    SceneDetails scene = new SceneDetails(id, sceneName, startTime, endTime, days, isRepeating, appStartTime, appEndTime, applianceId,
                                            applianceName, roomId, onPendingIntentId, offPendingIntentId, scene_Config_Id, isActivated, isAlarmSet, day, applianceType, curtainLevel);
                                    sceneDetailsList.add(scene);

                                    if(sceneList.size()!=0 && !containsId(sceneList,scene.getSceneId()))
                                    {
                                        sceneList.add(scene);

                                    }
                                    else if(sceneList.size()==0)
                                    {
                                        sceneList.add(scene);
                                    }
                                }
                            }
                        }
                    }

                   /* try {
                        Thread.sleep(2000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
*/
                    mRecyclerView.setHasFixedSize(true);
                    lmSchedular = new GridLayoutManager(getApplicationContext(), 2);
                    //lmSchedular=new LinearLayoutManager(getApplicationContext(),LinearLayoutManager.HORIZONTAL,false);
                    mRecyclerView.addItemDecoration(new DividerItemDecoration(UserSchedularActivity.this, DividerItemDecoration.HORIZONTAL_LIST));
                    mRecyclerView.setLayoutManager(lmSchedular);
                    if(!sceneList.isEmpty() || !sceneList.equals(null)) {
                        mAdapter = new MyRecyclerViewAdapter(sceneList);
                        mRecyclerView.setAdapter(mAdapter);
                    }

                    mRecyclerView.addOnItemTouchListener(new RecyclerItemClickListenerAndDetector(UserSchedularActivity.this,
                            new RecyclerItemClickListenerAndDetector.OnItemClickListener() {
                                @Override
                                public void onItemClick(View view, int position) {
                                    if (position == 0) {
                                        getSceneName();
                                    }


                                }
                            })
                    );

                    mRecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {
                        @Override
                        public void onScrollStateChanged(RecyclerView recyclerView, int newState)
                        {
                            if (newState == 0) {
                                GlobalApplication.isSchedularClickable= true;
                            }

                        }

                        @Override
                        public void onScrolled(RecyclerView recyclerView, int dx, int dy)
                        {
                            int state = recyclerView.getScrollState();
                            if (state == 0)
                            {
                                GlobalApplication.isSchedularClickable = true;

                            } else {

                                GlobalApplication.isSchedularClickable  = false;

                            }


                        }
                    });
                    if(!isFinishing())
                        mDialog.dismiss();
                }

                @Override
                public void onCancelled(DatabaseError DatabaseError) {

                }

            });





        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }


        try
        {
            DatabaseReference curtainRef=localRef.child("curtain").child(Customer.getCustomer().customerId).child("roomdetails");
            curtainRef.addValueEventListener(new ValueEventListener()
            {
                @Override
                public void onDataChange(DataSnapshot dataSnapshot)
                {
                    CurtainDetails curtain1=null;
                    curtainDetailsList = new ArrayList<>();

                    for(DataSnapshot roomSnapshot:dataSnapshot.getChildren())
                    {
                        ArrayList<CurtainDetails> temp = null;
                        for (DataSnapshot curtainDetails : roomSnapshot.getChildren())
                        {
                            temp = new ArrayList<>();
                            for (DataSnapshot curtain : curtainDetails.getChildren()) {
                                curtain1 = curtain.getValue(CurtainDetails.class);
                                temp.add(curtain1);
                            }
                        }
                        curtainDetailsList.add(curtain1);
                        if(curtain1!=null) {
                            roomWiseCurtainList.put(curtain1.getcurtainRoomName(), temp);
                        }

                    }
                    if(!isFinishing())
                        mDialog.dismiss();
                }

                @Override
                public void onCancelled(DatabaseError DatabaseError) {

                }
            });

        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);

        }

        /*********************************************************gateController***************************************************/

        try {

            final DatabaseReference gateControllerDetails = localRef.child("gateController").child(Customer.getCustomer().customerId).child("gateControllerDetails");

            gateControllerDetails.addValueEventListener(new ValueEventListener()
            {
                @Override
                public void onDataChange(DataSnapshot dataSnapshot)
                {
                    gateControllerDetailsArrayList = new ArrayList<>();


                    GateControllerDetails wSD = null;
                    for (DataSnapshot roomSnapshot : dataSnapshot.getChildren())
                    {
                        ArrayList<GateControllerDetails> temp = new ArrayList<>();

                        String w_Name = roomSnapshot.child("gateControllerName").getValue(String.class);
                        String w_id = roomSnapshot.child("gateControllerId").getValue(String.class);
                        Integer toggle = roomSnapshot.child("toggle").getValue(Integer.class);
                        Integer level = roomSnapshot.child("level").getValue(Integer.class);

                        wSD = new GateControllerDetails(w_id, w_Name, toggle, level);
                        temp.add(wSD);
                        gateControllerDetailsArrayList.add(wSD);
                    }
                    if(!isFinishing())
                        mDialog.dismiss();

                }

                @Override
                public void onCancelled(DatabaseError DatabaseError) {
                    System.out.println("The read failed: " + DatabaseError.getMessage());

                }
            });
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }


    }

    @Override
    protected void onDestroy()
    {
        super.onDestroy();

        if(mDialog!=null && mDialog.isShowing())
        {
            mDialog.dismiss();
        }
    }


    public boolean containsId(List<SceneDetails> list, String id) {
        for (SceneDetails object : list) {
            if (object.getSceneId().equals(id)) {
                return true;
            }
        }
        return false;
    }





    public ArrayList<DataObject> getDataSet()
    {
        ArrayList results = new ArrayList<>();
        try {

            Scene current;

            DataObject obj, obj1;

            List<Scene> list = SceneDataHelper.getAllScene();

            obj = new DataObject("Create New Scene");
            results.add(obj);

            int len = list.size();
            int j;
            for (j = 0; j < len; j++)
            {
                current = list.get(j);
                obj1 = new DataObject(current);
                results.add(j + 1, obj1);
            }
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }

        return results;

    }








    @Override
    public boolean onCreateOptionsMenu(Menu menu)
    {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item)
    {

        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    public boolean onContextItemSelected(MenuItem item)
    {

        try
        {
            String sceneId = item.getIntent().getStringExtra("SceneId");
            final List<SceneDetails>requiredList= getSceneIdWiseList(sceneId);
            final String name = item.getIntent().getStringExtra("SceneName");

            if (item.getTitle().equals("Delete Scene"))
            {

                Toast.makeText(this, name + " Schedular ", Toast.LENGTH_SHORT).show();
                ActiveAndroid.beginTransaction();
                (new Delete()).from(Scene.class).where("scene_Id = ?", new Object[]{sceneId}).execute();
                ActiveAndroid.setTransactionSuccessful();
                ActiveAndroid.endTransaction();

                ActiveAndroid.beginTransaction();
                (new Delete()).from(Scene_Configuration.class).where("scene_Id=?", new Object[]{sceneId}).execute();
                ActiveAndroid.setTransactionSuccessful();
                ActiveAndroid.endTransaction();

                for (int j = 0; j < requiredList.size(); j++)
                {
                    SceneDetails sceneDetails = requiredList.get(j);
                    int on = sceneDetails.getPendingIntentOnId();
                    int off=sceneDetails.getPendingIntentOffId();
                    String r = sceneDetails.getRoomId();
                    String a = sceneDetails.getApplainceId();
                    myAlarmManager.CancelAlarm(Scene_Id,r, a, on,slave_Id);
                    if(off!=0) {
                        myAlarmManager.CancelAlarm(Scene_Id,r, a, off,slave_Id);
                    }
                }
                DatabaseReference removeScene = localRef.child("scene").child(Customer.getCustomer().customerId).child("sceneDetails").child(sceneId);
                removeScene.setValue(null);

                DatabaseReference updateSceneCount = localRef.child("scene").child(Customer.getCustomer().customerId).child("sceneCount");
                updateCount(updateSceneCount, -1);

                setRecyclerView();
            }

            /*if (item.getTitle() == "Activate Scene")
            {

                Firebase Active = localRef.child("scene").child(Customer.getCustomer().customerId).child("sceneDetails").child(sceneId).child("isActivated");
                Active.runTransaction(new Transaction.Handler() {
                    @Override
                    public Transaction.Result doTransaction(MutableData mutableData) {
                        mutableData.setValue(true);
                        return Transaction.success(mutableData);
                    }

                    @Override
                    public void onComplete(DatabaseError DatabaseError, boolean b, DataSnapshot dataSnapshot) {
                        Toast.makeText(UserSchedularActivity.this, name + " Schedular is Activated", Toast.LENGTH_SHORT).show();

                    }
                });

               Firebase checkRef=localRef.child("scene").child(Customer.getCustomer().customerId).child("sceneDetails").child(sceneId).child("isActivated");
                checkRef.addValueEventListener(new ValueEventListener()
                {
                    @Override
                    public void onDataChange(DataSnapshot dataSnapshot)
                    {
                        if(dataSnapshot.getValue(Boolean.class))
                        {
                            for (int i = 0; i < requiredList.size(); i++)
                            {
                                SceneDetails sceneDetails = requiredList.get(i);
                                int onId = sceneDetails.getPendingIntentOnId();
                                int offId=sceneDetails.getPendingIntentOffId();
                                String r_id = sceneDetails.getRoomId();
                                String a_id = sceneDetails.getApplainceId();
                                String d = sceneDetails.getDay();
                                String at=sceneDetails.getApplianceType();
                                int level=sceneDetails.getCurtainLevel();

                                String app_stat_time = sceneDetails.getAppStartTime();
                                Calendar calendar = setCalender(app_stat_time, d);
                                myAlarmManager.SetAlarm(calendar,  Scene_Id,r_id, a_id, "true",onId, at,level);
                                if(offId!=0) {

                                    String app_end_time = sceneDetails.getAppEndTime();
                                    Calendar calendar1 = setCalender(app_end_time, d);
                                    myAlarmManager.SetAlarm(calendar1, Scene_Id,r_id, a_id, "false", offId, at, level);
                                }

                            }

                        }

                    }

                    @Override
                    public void onCancelled(DatabaseError DatabaseError) {

                    }
                });



            }
            if (item.getTitle() == "DeActivate Scene")
            {
                Firebase deActive = localRef.child("scene").child(Customer.getCustomer().customerId).child("sceneDetails").child(sceneId).child("isActivated");
                deActive.runTransaction(new Transaction.Handler() {
                    @Override
                    public Transaction.Result doTransaction(MutableData mutableData) {
                        mutableData.setValue(false);

                        return Transaction.success(mutableData);
                    }

                    @Override
                    public void onComplete(DatabaseError DatabaseError, boolean b, DataSnapshot dataSnapshot) {
                        Toast.makeText(UserSchedularActivity.this, name + " Schedular  is DeActivated", Toast.LENGTH_SHORT).show();

                    }
                });
               Firebase deActiveRef = localRef.child("scene").child(Customer.getCustomer().customerId).child("sceneDetails").child(sceneId).child("isActivated");

                deActiveRef.addValueEventListener(new ValueEventListener() {
                    @Override
                    public void onDataChange(DataSnapshot dataSnapshot) {
                        for (int j = 0; j < requiredList.size(); j++) {
                            SceneDetails sceneDetails = requiredList.get(j);
                            int on = sceneDetails.getPendingIntentOnId();
                            int off = sceneDetails.getPendingIntentOffId();
                            String r = sceneDetails.getRoomId();
                            String a = sceneDetails.getApplainceId();
                            myAlarmManager.CancelAlarm(Scene_Id, r, a, on);
                            if (off != 0) {
                                myAlarmManager.CancelAlarm(Scene_Id, r, a, off);
                            }
                        }
                        Toast.makeText(UserSchedularActivity.this, name + " Scene is DeActivated", Toast.LENGTH_SHORT).show();
                    }

                    @Override
                    public void onCancelled(DatabaseError DatabaseError) {

                    }
                });


            }*/

            if (item.getTitle() == "View Appliance Details")
            {
                RecyclerView recyclerView;
                RecyclerView.Adapter adapterView;
                RecyclerView.LayoutManager lmAppliance;

                LayoutInflater inflater = (LayoutInflater) getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                View view = inflater.inflate(R.layout.view_scene_details, null);

                recyclerView = (RecyclerView) view.findViewById(R.id.recycler_view);
                lmAppliance = new GridLayoutManager(this, 1);
                recyclerView.addItemDecoration(new DividerItemDecoration(UserSchedularActivity.this, DividerItemDecoration.VERTICAL_LIST));
                recyclerView.setLayoutManager(lmAppliance);
                adapterView = new ViewAdapter(requiredList, UserSchedularActivity.appcontext);
                recyclerView.setAdapter(adapterView);

                AlertDialog.Builder builder = new AlertDialog.Builder(UserSchedularActivity.this,R.style.DialogSlideAnim);
                builder.setTitle("Scheduler Details");
                builder.setView(view);
                builder.setPositiveButton("OK", new DialogInterface.OnClickListener()
                {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                    }
                });
                builder.show();



            }
        }catch(Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }
        return super.onContextItemSelected(item);

    }

    private List<SceneDetails> getSceneIdWiseList(String sceneId)
    {

        List<SceneDetails>SceneIdWiseList=new ArrayList<>();
        try
        {
            for (int i = 0; i < sceneDetailsList.size(); i++)
            {
                SceneDetails s = sceneDetailsList.get(i);
                String sId = s.getSceneId();
                if(sceneId.equals(sId)) {
                    if(SceneIdWiseList.size()==0)
                    {

                        SceneIdWiseList.add(s);
                    }
                    else
                    {
                        if(!SceneIdWiseList.contains(s))
                        {
                            SceneIdWiseList.add(s);
                        }
                    }
                }            }
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }
        return SceneIdWiseList;

    }

    private Calendar setCalender(String time, String day)
    {
        Calendar calendar = Calendar.getInstance();
        try {

            String c_time[] = time.split(":");
            calendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(c_time[0]));
            calendar.set(Calendar.MINUTE, Integer.parseInt(c_time[1].substring(0,c_time[1].length())));
            calendar.set(Calendar.SECOND, 0);
            calendar.set(Calendar.MILLISECOND, 0);
            switch (day)
            {
                case "Sunday":
                    calendar.set(Calendar.DAY_OF_WEEK, 1);
                    break;
                case "Monday":
                    calendar.set(Calendar.DAY_OF_WEEK, 2);
                    break;
                case "Tuesday":
                    calendar.set(Calendar.DAY_OF_WEEK, 3);
                    break;
                case "Wednsday":
                    calendar.set(Calendar.DAY_OF_WEEK, 4);
                    break;
                case "Thursday":
                    calendar.set(Calendar.DAY_OF_WEEK, 5);
                    break;
                case "Friday":
                    calendar.set(Calendar.DAY_OF_WEEK, 6);
                    break;
                case "Saturday":
                    calendar.set(Calendar.DAY_OF_WEEK, 7);
                    break;
                default:
                    break;
            }
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }


        return calendar;
    }

    @Override
    protected void onResume()
    {

        super.onResume();

        /*((MyRecyclerViewAdapter) mAdapter).setOnItemClickListener(new MyRecyclerViewAdapter.MyClickListener() {
            @Override
            public void onItemClick(int position, View v) {
                if (position == 0) {

                    Log.i(LOG_TAG, " Clicked on Item " + position);

                    getSceneName();
                } else {
                    Log.i(LOG_TAG, " Clicked on Item " + position);

                    List<Scene> list = SceneDataHelper.getAllScene();

                    String name = list.get(position - 1).scene_Name.toString();

                }
            }
        });*/
    }

    private void updateCount(DatabaseReference firebase, final int i)
    {
        try {
            firebase.runTransaction(new Transaction.Handler() {
                @Override
                public Transaction.Result doTransaction(MutableData currentData) {
                    if (currentData.getValue() == null) {
                        currentData.setValue(1);
                    } else {
                        currentData.setValue((Long) currentData.getValue() + i);
                    }
                    return Transaction.success(currentData); //we can also abort by calling Transaction.abort()
                }

                @Override


                public void onComplete(DatabaseError DatabaseError, boolean committed, DataSnapshot currentData) {
                    //This method will be called once with the results of the transaction.
                }
            });
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }
    }

    public void setRecyclerView()
    {
        try
        {

            Intent same = new Intent(this, UserSchedularActivity.class);
            same.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            startActivity(same);
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }

    }


    public String getSceneId()
    {
        try {
            Scene_Id = AutoGeneratedId.autoGenerated_Scene_ID();
            txt_auto_scene_id.setText(Scene_Id);

        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }
        return Scene_Id;

    }

    public void getSceneName()
    {
        try {
            LayoutInflater inflater = (LayoutInflater) getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

            View nameview = inflater.inflate(R.layout.scene_name_layout, null);

            txt_scene_id = (TextView) nameview.findViewById(R.id.txt_scene_id);

            txt_auto_scene_id = (TextView) nameview.findViewById(R.id.txt_auto_Scece_id);

            txt_auto_scene_id.setText(getSceneId());

            txt_scene_name = (TextView) nameview.findViewById(R.id.txt_enter_name);

            edt_scene_name = (EditText) nameview.findViewById(R.id.edt_txt_scene_name);
            edt_scene_name.setText(Scene_Name);

            AlertDialog.Builder nameAlter = new AlertDialog.Builder(this, R.style.DialogSlideAnim);

            nameAlter.setView(nameview);

            nameAlter.setTitle("Scene Name");

            nameAlter.setPositiveButton("Next", new DialogInterface.OnClickListener()
            {
                @Override
                public void onClick(DialogInterface dialog, int which)
                {
                    // TODO Auto-generated method stub
                    if(edt_scene_name.getText().length() != 0)
                    {
                        List<Scene> nameList = SceneDataHelper.getAllScene();
                        int len = nameList.size();
                        if (len != 0)
                        {
                            int result= validateSchedularName(edt_scene_name.getText().toString(),nameList);
                            if(result!=0)
                            {
                                Toast.makeText(getApplicationContext(), "Schedular Name Is Already Exists", Toast.LENGTH_SHORT).show();
                            }
                            else
                            {
                                Scene_Name = edt_scene_name.getText().toString();
                                getStartTime();
                            }
                        }
                        else
                        {
                            Scene_Name = edt_scene_name.getText().toString();
                            getStartTime();

                        }


                    }else
                    {
                        Toast.makeText(getApplicationContext(), " Schedular Name Is Empty", Toast.LENGTH_SHORT).show();
                    }

                }

            });

            nameAlter.setNegativeButton("Cancel", new DialogInterface.OnClickListener()
            {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();

                }
            });

            nameAlter.show();
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }
    }

    private int validateSchedularName(String s, List<Scene> nameList)
    {
        for(int p=0;p<nameList.size();p++)
        {
            Scene scene = nameList.get(p);
            String name = scene.scene_Name;
            if(name.equals(s))
            {
                return 1;
            }else
            {
                continue;
            }

        }

        return 0;
    }


    public void getStartTime()
    {
        try
        {

            LayoutInflater inflater = (LayoutInflater) getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

            View view = inflater.inflate(R.layout.timepicker_lauout, null);

            final TimePicker tp = (TimePicker) view.findViewById(R.id.timepicker);

            timeAlert = new AlertDialog.Builder(this, R.style.DialogSlideAnim);
            timeAlert.setView(view);
            timeAlert.setTitle("Set Start Time");
            AlertDialog.Builder next = timeAlert.setPositiveButton("Next", new DialogInterface.OnClickListener()
            {


                @SuppressWarnings("deprecation")
                @TargetApi(11)
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    startTimeHour = String.valueOf(tp.getCurrentHour());

                    startTimeMinute = String.valueOf(tp.getCurrentMinute());
                    if(startTimeMinute.length()==1)
                    {
                        startTimeMinute="0"+startTimeMinute;
                    }


                    Start_Time = startTimeHour + ":" + startTimeMinute;


                   /* if (tp.getCurrentHour() < 12) {

                        Start_Time = startTimeHour + ":" + startTimeMinute + "am";
                    } else {
                        Start_Time = startTimeHour + ":" + startTimeMinute + "pm";
                    }*/
                    startcal = Calendar.getInstance();
                    startcal.set(Calendar.HOUR_OF_DAY, parseInt(startTimeHour));
                    startcal.set(Calendar.MINUTE, parseInt(startTimeMinute));
                    startcal.set(Calendar.SECOND, 0);
                    startcal.set(Calendar.MILLISECOND, 0);

                    getEndTime();


                }
            });

            timeAlert.setNegativeButton("Back", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {

                    edt_scene_name.setText(Scene_Name);
                    getSceneName();
                }
            }).show();
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }


    }

    public void getEndTime()
    {
        try {
            LayoutInflater inflater = (LayoutInflater) getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

            View view = inflater.inflate(R.layout.timepicker_lauout, null);

            tp = (TimePicker) view.findViewById(R.id.timepicker);


            final AlertDialog.Builder timeAlert = new AlertDialog.Builder(this,R.style.DialogSlideAnim);

            timeAlert.setView(view);
            timeAlert.setTitle("Set End Time");

            timeAlert.setPositiveButton("Next", new DialogInterface.OnClickListener() {


                @Override
                public void onClick(DialogInterface dialog, int which)
                {
                    //noinspection deprecation
                    endTimeHour = String.valueOf(tp.getCurrentHour());
                    //noinspection deprecation
                    endTimeMinute = String.valueOf(tp.getCurrentMinute());
                    //noinspection deprecation

                    if(endTimeMinute.length()==1)
                    {
                        endTimeMinute="0"+endTimeMinute;

                    }

                    End_Time = endTimeHour + ":" + endTimeMinute;

/*

                    if (tp.getCurrentHour() < 12) {
                        End_Time = endTimeHour + ":" + endTimeMinute + "am";

                    } else {
                        End_Time = endTimeHour + ":" + endTimeMinute + "pm";
                    }
*/

                    endcal = Calendar.getInstance();
                    endcal.set(Calendar.HOUR_OF_DAY, parseInt(endTimeHour));
                    endcal.set(Calendar.MINUTE, parseInt(endTimeMinute));
                    //selectDays();

                    if (endcal.before(startcal)) {
                        Toast.makeText(getApplicationContext(), "End_Time Of Schedular Is Before Start_Time Of Schedular \n " +
                                "Please Select Proper Timings", Toast.LENGTH_LONG).show();
                        getEndTime();
                    } else {
                        Toast.makeText(getApplicationContext(), "Times Are Correct", Toast.LENGTH_LONG).show();

                        selectDays();
                    }

                }

            });

            timeAlert.setNegativeButton("Back", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    getStartTime();

                }
            });

            final AlertDialog dialog1 = timeAlert.create();
            dialog1.show();
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }

    }

    private void selectDays()
    {
        try {
            final ArrayList<String> weekDays = new ArrayList<>();
            weekDays.add(0, "Sunday");
            weekDays.add(1, "Monday");
            weekDays.add(2, "Tuesday");
            weekDays.add(3, "Wednsday");
            weekDays.add(4, "Thursday");
            weekDays.add(5, "Friday");
            weekDays.add(6, "Saturday");

            LayoutInflater inflater = (LayoutInflater) getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

            View view = inflater.inflate(R.layout.day_list, null);

            listView = (ListView) view.findViewById(R.id.listView_days);

            checkbox=(CheckBox)view.findViewById(R.id.checkBox);
            checkbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    UserSchedularActivity.Repeating = isChecked;

                }
            });

            listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
            listView.setAdapter(new ArrayAdapter<String>(this, android.R.layout.simple_list_item_multiple_choice, weekDays) {
                @Override
                public View getView(int position, View convertView, ViewGroup parent) {
                    View view = super.getView(position, convertView, parent);
                    final CheckedTextView text = (CheckedTextView) view.findViewById(android.R.id.text1);
                    text.setTextColor(Color.WHITE);
                    return view;
                }
            });


            AlertDialog.Builder builder = new AlertDialog.Builder(this,R.style.DialogSlideAnim);

            builder.setTitle("SelectDays");
            builder.setView(view);
            builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {

                @Override
                public void onClick(DialogInterface dialog, int which) {


                    selected = "";
                    int cntChoice = listView.getCount();
                    selectedDays = new ArrayList<>();

                    SparseBooleanArray sparseBooleanArray = listView.getCheckedItemPositions();
                    for (int i = 0; i < cntChoice; i++) {
                        if (sparseBooleanArray.get(i)) {
                            selected += listView.getItemAtPosition(i).toString() + (",");
                            String dd = listView.getItemAtPosition(i).toString();
                            selectedDays.add(dd);
                        }

                    }

                    if (selectedDays == null) {
                        Toast.makeText(getApplicationContext(), "Please Select The Days", Toast.LENGTH_LONG).show();
                        selectDays();

                    } else {
                        //Add to DataBase
                        SceneDataHelper.addSceneTable(AutoGeneratedId.autoGenerated_Scene_ID(), Scene_Name, Start_Time, End_Time, selected, 0, UserSchedularActivity.Repeating, false);


                        //Add to Firebase

                        sceneRef = localRef.child("scene").child(Customer.getCustomer().customerId).child("sceneDetails").child(Scene_Id);
                        Map<String, Object> sceneDetails = new HashMap<>();
                        sceneDetails.put("sceneId", Scene_Id);
                        sceneDetails.put("sceneName", Scene_Name);
                        sceneDetails.put("startTime", Start_Time);
                        sceneDetails.put("endTime", End_Time);
                        sceneDetails.put("isActivated",0);
                        sceneDetails.put("isAlarmSet",false);
                        sceneDetails.put("listOfDays", selected);
                        sceneDetails.put("isRepeating", UserSchedularActivity.Repeating);
                        sceneRef.updateChildren(sceneDetails);

                        //Add sceneCount
                        DatabaseReference sceneCountRef = localRef.child("scene").child(Customer.getCustomer().customerId).child("sceneCount");
                        updateCount(sceneCountRef, 1);

                        getAppliance();
                    }
                }
            });

            builder.setNegativeButton("Back", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {

                    getEndTime();

                }
            }).show();
        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }

    }


    private void getAppliance()
    {
        try
        {

            /*******************************************************APPLIANCE***********************************************************/
            final Animation animation;
            animation= AnimationUtils.loadAnimation(getApplicationContext(),R.anim.abc_slide_in_top);

            LayoutInflater inflater = (LayoutInflater) getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

            final View view = inflater.inflate(R.layout.exapandable_list_view_layout, null);
            expandableListViewAppliance = (ExpandableListView) view.findViewById(R.id.expandableListViewForAppliance);
            expandableListViewCurtain = (ExpandableListView) view.findViewById(R.id.expandableListViewForCuratain);
            expandableListViewgateController=(ExpandableListView) view.findViewById(R.id.expandableListViewforgateController);
            expandableListViewForSensor = (ExpandableListView) view.findViewById(R.id.expandableListViewForSensor);

            expandableListTitle = new ArrayList<>(roomApplianceList.keySet());





            RadioGroup radioGroup= (RadioGroup) view.findViewById(R.id.radio_group);

            radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(RadioGroup group, int checkedId) {
                    View selected = group.findViewById(checkedId);
                    RadioButton rd = (RadioButton) selected;
                    String value = rd.getText().toString();

                    switch (value) {

                        case "Sensor":

                            applianceType = "Sensor";
                            final ArrayList<String> expandableSensorTitle = new ArrayList<>(roomWiseSensorList.keySet());
                            expandableListViewAppliance.setVisibility(View.GONE);
                            expandableListViewForSensor.startAnimation(animation);
                            expandableListViewCurtain.setVisibility(View.GONE);
                            expandableListViewgateController.setVisibility(View.GONE);
                            expandableListViewForSensor.setVisibility(View.VISIBLE);
                            expandableSensorListAdapter = new com.rollingdice.deft.android.tab.user.ExpandableSensorListAdapter(getApplicationContext(), expandableSensorTitle, roomWiseSensorList);
                            expandableListViewForSensor.setAdapter(expandableSensorListAdapter);
                            expandableListViewForSensor.startAnimation(animation);

                            expandableListViewForSensor.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() {
                                @Override
                                public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) {
                                    String roomName = (String) parent.getExpandableListAdapter().getGroup(groupPosition);
                                    //  Toast.makeText(UserSchedularActivity.this, "" + roomName, Toast.LENGTH_SHORT).show();
                                    return false;

                                    //   Toast.makeText(getApplicationContext(), "Selected Room:     " + room_Name + "" + roomId, Toast.LENGTH_SHORT).show();

                                }
                            });
                            expandableListViewForSensor.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {
                                @Override
                                public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
                                    selectedApp = new ArrayList<>();
                                    selectedApp.add(childPosition);

                                    SensorDetail sensorDetail = (SensorDetail) parent.getExpandableListAdapter().getChild(groupPosition, childPosition);
                                    sensorName = sensorDetail.getSensorName();
                                    sensorId= sensorDetail.getId();
                                    sensorRoomId = sensorDetail.getRoomId();
                                    //   sensorRoomName = expandableSensorTitle.get(childPosition);


                                    // Toast.makeText(getApplicationContext(), "Selected Appliance:     " + app_Name + "" + applinceId, Toast.LENGTH_SHORT).show();
                                    getApplianceStartTime();
                                    return false;
                                }
                            });
                            break;


                        case "Appliances":
                            applianceType = "Appliances";
                            expandableListViewAppliance.setVisibility(View.VISIBLE);
                            expandableListViewAppliance.startAnimation(animation);
                            expandableListViewCurtain.setVisibility(View.GONE);
                            expandableListViewgateController.setVisibility(View.GONE);
                            expandableListViewForSensor.setVisibility(View.GONE);
                            expandableListApplianceAdapter = new com.rollingdice.deft.android.tab.user.ExpandableListAdapter(getApplicationContext(), expandableListTitle, roomApplianceList);
                            expandableListViewAppliance.setAdapter(expandableListApplianceAdapter);
                            expandableListViewAppliance.startAnimation(animation);

                            expandableListViewAppliance.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() {
                                @Override
                                public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) {
                                    room_Name = (String) parent.getExpandableListAdapter().getGroup(groupPosition);
                                    roomList = new Select().from(Room.class).where("roomName='" + room_Name + "'").execute();
                                    for (int i = 0; i < roomList.size(); i++) {
                                        Room r = roomList.get(i);
                                        roomId = r.roomId;
                                    }

                                    //   Toast.makeText(getApplicationContext(), "Selected Room:     " + room_Name + "" + roomId, Toast.LENGTH_SHORT).show();
                                    return false;
                                }
                            });
                            expandableListViewAppliance.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {
                                @Override
                                public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
                                    selectedApp = new ArrayList<>();
                                    selectedApp.add(childPosition);

                                    RoomAppliance roomAppliance = (RoomAppliance) parent.getExpandableListAdapter().getChild(groupPosition, childPosition);
                                    app_Name = roomAppliance.getApplianceName();
                                    applinceId = roomAppliance.getId();
                                    slave_Id = roomAppliance.getSlaveId();

                                    // Toast.makeText(getApplicationContext(), "Selected Appliance:     " + app_Name + "" + applinceId, Toast.LENGTH_SHORT).show();
                                    getApplianceStartTime();
                                    return false;
                                }
                            });
                            break;


                        case "Curtains":

                            applianceType = "Curtains";
                            expandableListViewAppliance.setVisibility(View.GONE);
                            expandableListViewForSensor.setVisibility(View.GONE);
                            expandableListViewgateController.setVisibility(View.GONE);
                            List<String>expandableListCurtainRoomNameTitle= new ArrayList<>();
                            for(int i=0;i<curtainDetailsList.size();i++)
                            {
                                CurtainDetails curtainDetails=curtainDetailsList.get(i);
                                String roomName=curtainDetails.getcurtainRoomName();
                                expandableListCurtainRoomNameTitle.add(roomName);
                            }

                            expandableListViewCurtain.setVisibility(View.VISIBLE);
                            expandableListCurtainAdapter = new ExpandableCurtainListAdapter(getApplicationContext(), expandableListCurtainRoomNameTitle, roomWiseCurtainList);
                            expandableListViewCurtain.setAdapter(expandableListCurtainAdapter);
                            expandableListViewCurtain.startAnimation(animation);

                            expandableListViewCurtain.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() {
                                @Override
                                public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) {
                                    String roomName = (String) parent.getExpandableListAdapter().getGroup(groupPosition);
                                    //  Toast.makeText(UserSchedularActivity.this, "" + roomName, Toast.LENGTH_SHORT).show();
                                    return false;
                                }
                            });

                            expandableListViewCurtain.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {
                                @Override
                                public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
                                    selectedApp = new ArrayList<>();
                                    selectedApp.add(childPosition);

                                    CurtainDetails curtainDetails = (CurtainDetails) parent.getExpandableListAdapter().getChild(groupPosition, childPosition);
                                    curtainName = curtainDetails.getCurtainName();
                                    curtainRoomName = curtainDetails.getcurtainRoomName();
                                    curtainRoonId = curtainDetails.getRoomId();
                                    curtainId = curtainDetails.getCurtainId();

                                    //Toast.makeText(UserSchedularActivity.this, "" + curtainName, Toast.LENGTH_SHORT).show();

                                    getCurtainLevel();
                                    return false;
                                }
                            });

                            break;
                        case "gateControllers":

                            applianceType="gateControllers";
                            expandableListViewAppliance.setVisibility(View.GONE);
                            expandableListViewCurtain.setVisibility(View.GONE);
                            expandableListViewForSensor.setVisibility(View.GONE);
                            expandableListViewgateController.setVisibility(View.VISIBLE);
                            ArrayList<String>expandableListGateCOntroller= new ArrayList<>();
                            for(int g = 0; g< gateControllerDetailsArrayList.size(); g++)
                            {
                                GateControllerDetails gateControllerDetails = gateControllerDetailsArrayList.get(g);
                                expandableListGateCOntroller.add(gateControllerDetails.getGateControllerName());
                            }

                            expandableGateControllerListAdapter =new ExpandableGateControllerListAdapter(getApplicationContext(),expandableListGateCOntroller,roomWisegateControllerList);
                            expandableListViewgateController.setAdapter(expandableGateControllerListAdapter);
                            expandableListViewgateController.startAnimation(animation);
                            expandableListViewgateController.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() {
                                @Override
                                public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) {
                                    String roomName = (String) parent.getExpandableListAdapter().getGroup(groupPosition);
                                    //  Toast.makeText(UserSchedularActivity.this, "" + roomName, Toast.LENGTH_SHORT).show();
                                    return false;
                                }
                            });
                            expandableListViewgateController.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {
                                @Override
                                public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id)
                                {
                                    selectedApp = new ArrayList<>();
                                    selectedApp.add(childPosition);

                                    GateControllerDetails gateControllerDetails = (GateControllerDetails) parent.getExpandableListAdapter().getChild(groupPosition, childPosition);
                                    gcName = gateControllerDetails.getGateControllerName();
                                    gcId = gateControllerDetails.getGateControllerId();

                                    getApplianceStartTime();


                                    return false;
                                }
                            });
                            break;


                    }

                }

            });






            final AlertDialog.Builder appAlertBox = new AlertDialog.Builder(this, R.style.DialogSlideAnim);
            appAlertBox.setTitle("Select Appliance");

            appAlertBox.setView(view);

            appAlertBox.setPositiveButton("Finish", new DialogInterface.OnClickListener()
            {
                @Override
                public void onClick(DialogInterface dialog, int which)
                {
                    if (selectedApp == null)
                    {
                        Toast.makeText(getApplicationContext(), "Please Select The Apliances", Toast.LENGTH_LONG).show();
                        getAppliance();
                    } else {

                        setRecyclerView();
                        sendNotification();
                    }
                }
            });

            appAlertBox.setNegativeButton("Back", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    selectDays();

                }
            }).show();

        }catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }


    }

    private void getCurtainLevel()
    {
        LayoutInflater inflater = (LayoutInflater) getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        View view = inflater.inflate(R.layout.curtain_level_layout, null);
        final DiscreteSeekBar seekBar= (DiscreteSeekBar) view.findViewById(R.id.curtainLevel);
        AlertDialog.Builder level = new AlertDialog.Builder(this, R.style.DialogSlideAnim);
        level.setView(view);
        level.setTitle("Select Curtain Level");


        seekBar.setOnProgressChangeListener(new DiscreteSeekBar.OnProgressChangeListener() {
            @Override
            public void onProgressChanged(DiscreteSeekBar seekBar, int value, boolean fromUser) {

            }

            @Override
            public void onStartTrackingTouch(DiscreteSeekBar seekBar) {

            }

            @Override
            public void onStopTrackingTouch(DiscreteSeekBar seekBar) {
                cur_Level = seekBar.getProgress();


            }
        });


        level.setPositiveButton("Next", new DialogInterface.OnClickListener()
        {
            @Override
            public void onClick(DialogInterface dialog, int which)
            {
                //  Toast.makeText(UserSchedularActivity.this, "CurtainLevel" + cur_Level, Toast.LENGTH_SHORT).show();
                getApplianceStartTime();
            }

        });
        level.setNegativeButton("Back", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which)
            {
                getAppliance();
            }
        }).show();


    }

    private void getApplianceStartTime()
    {
        try
        {
            LayoutInflater inflater = (LayoutInflater) getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

            View view = inflater.inflate(R.layout.timepicker_lauout, null);

            final TimePicker tp = (TimePicker) view.findViewById(R.id.timepicker);


            AlertDialog.Builder timeAlert = new AlertDialog.Builder(this, R.style.DialogSlideAnim);
            timeAlert.setView(view);
            if(!applianceType.equals("Curtains")) {
                timeAlert.setTitle("Set Start Time For Appliance");
            }else
            {
                timeAlert.setTitle("Set Curtains OPEN/CLOSE Time");
            }
            final List<Integer> onPenList= new ArrayList<>();

            timeAlert.setPositiveButton("Next", new DialogInterface.OnClickListener() {


                @TargetApi(11)
                @Override
                public void onClick(DialogInterface dialog, int which)
                {
                    //noinspection deprecation
                    appstartTimeHour = tp.getCurrentHour().toString();
                    //noinspection deprecation
                    appstartTimeMinute = tp.getCurrentMinute().toString();
                    appStartcal = Calendar.getInstance();
                    appStartcal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(appstartTimeHour));
                    appStartcal.set(Calendar.MINUTE, Integer.parseInt(appstartTimeMinute));
                    appStartcal.set(Calendar.SECOND, 0);
                    appStartcal.set(Calendar.MILLISECOND, 0);

                    if(appstartTimeMinute.length()==1)
                    {
                        appstartTimeMinute="0"+appstartTimeMinute;
                    }
                    appStartTime = appstartTimeHour + ":" + appstartTimeMinute;

                    //noinspection deprecation
                   /* if (tp.getCurrentHour() < 12) {
                        appStartTime = appstartTimeHour + ":" + appstartTimeMinute + "am";
                    } else {
                        appStartTime = appstartTimeHour + ":" + appstartTimeMinute + "pm";
                    }
*/

                    int g = appStartcal.compareTo(startcal);
                    if (g < 0) {
                        Toast.makeText(UserSchedularActivity.this, "Appliance OnTime is Before Schedular StartTime \n" +
                                "Please Give Correct Timings", Toast.LENGTH_SHORT).show();
                        getApplianceStartTime();
                    } else {

                        int result = validateApplianceTime(appStartTime);
                        if (result == 0) {

                            for (int q = 0; q < selectedDays.size(); q++) {

                                String day = selectedDays.get(q);
                                setCalender(appStartTime, day);
                                switch (day) {
                                    case "Sunday":
                                        appStartcal.set(Calendar.DAY_OF_WEEK, 1);
                                        break;
                                    case "Monday":
                                        appStartcal.set(Calendar.DAY_OF_WEEK, 2);
                                        break;
                                    case "Tuesday":
                                        appStartcal.set(Calendar.DAY_OF_WEEK, 3);
                                        break;
                                    case "Wednsday":
                                        appStartcal.set(Calendar.DAY_OF_WEEK, 4);
                                        break;
                                    case "Thursday":
                                        appStartcal.set(Calendar.DAY_OF_WEEK, 5);
                                        break;
                                    case "Friday":
                                        appStartcal.set(Calendar.DAY_OF_WEEK, 6);
                                        break;
                                    case "Saturday":
                                        appStartcal.set(Calendar.DAY_OF_WEEK, 7);
                                        break;
                                    default:
                                        break;
                                }

                                int onPendingIntentId = autogeneratedPendingIntentId();
                                onPenList.add(onPendingIntentId);
                                switch (applianceType) {
                                    case "Appliances":
                                        // myAlarmManager.SetAlarm(appStartcal,Scene_Id,roomId, applinceId, "true", onPendingIntentId, applianceType, 0);
                                        break;
                                    case "Curtains":
                                        ///myAlarmManager.SetAlarm(appStartcal, Scene_Id,curtainRoonId, curtainId, "true", onPendingIntentId, applianceType, cur_Level);
                                        break;
                                    default:
                                        ///  myAlarmManager.SetAlarm(appStartcal,Scene_Id,wspRoomId,gcId,"true",onPendingIntentId,applianceType,0);
                                        break;
                                }
                            }
                            getApplianceEndTime(onPenList);
                        } else {
                            Toast.makeText(UserSchedularActivity.this, "U have Alredy Scheduled a Appliance on This Time.\n" +
                                    " Please Select +/- 1 minute", Toast.LENGTH_SHORT).show();
                            getApplianceStartTime();

                        }

                    }

                }
            }).show();
        } catch (Exception e) {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }


    }

    private int autogeneratedPendingIntentId()
    {
        int Id = 0;

        try {

            int min = 1;
            int max = 200000000;

            Random r = new Random();
            Id = r.nextInt(max - min + 1) + min;

            // Toast.makeText(this, "" + Id, Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }

        return Id;
    }

    public void getApplianceEndTime(final List<Integer> onPenList)
    {
        try
        {

            LayoutInflater inflater = (LayoutInflater) getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

            View view = inflater.inflate(R.layout.timepicker_lauout, null);

            final TimePicker tp = (TimePicker) view.findViewById(R.id.timepicker);

            final AlertDialog.Builder timeAlert = new AlertDialog.Builder(this, R.style.DialogSlideAnim);


            timeAlert.setView(view);
            if(!applianceType.equals("Curtains")) {
                timeAlert.setTitle("Set End Time For Appliance");
            }else
            {
                timeAlert.setTitle("Curtain Schedular set");
                tp.setVisibility(View.GONE);
                timeAlert.setMessage("Schedular is Set For "+curtainName);
            }

            timeAlert.setPositiveButton("OK", new DialogInterface.OnClickListener()
            {
                @TargetApi(11)
                @Override
                public void onClick(DialogInterface dialog, int which)
                {
                    if (!applianceType.equals("Curtains"))
                    {

                        //noinspection deprecation
                        appendTimeHour = tp.getCurrentHour().toString();
                        //noinspection deprecation
                        appendTimeMinute = tp.getCurrentMinute().toString();
                        appEndCal = Calendar.getInstance();
                        appEndCal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(appendTimeHour));
                        appEndCal.set(Calendar.MINUTE, Integer.parseInt(appendTimeMinute));
                        appEndCal.set(Calendar.SECOND, 0);
                        appEndCal.set(Calendar.MILLISECOND, 0);

                        if(appendTimeMinute.length()==1)
                        {
                            appendTimeMinute="0"+appendTimeMinute;

                        }

                        appEndTime = appendTimeHour + ":" + appendTimeMinute;






                        //noinspection deprecation
                        /*if (tp.getCurrentHour() < 12) {
                            appEndTime = appendTimeHour + ":" + appendTimeMinute + "am";
                        } else {
                            appEndTime = appendTimeHour + ":" + appendTimeMinute + "pm";
                        }*/

                        int f = appEndCal.compareTo(endcal);
                        if (f > 0) {
                            Toast.makeText(UserSchedularActivity.this, "Appliance Off Time is After Schedular End Time\n" +
                                    "please select proper Time", Toast.LENGTH_SHORT).show();
                            getApplianceEndTime(onPenList);
                        } else {

                            int result = validateApplianceTime(appEndTime);
                            if (result == 0) {


                                for (int r = 0; r < selectedDays.size(); r++) {

                                    String day = selectedDays.get(r);

                                    switch (day)

                                    {
                                        case "Sunday":
                                            appEndCal.set(Calendar.DAY_OF_WEEK, 1);
                                            break;
                                        case "Monday":
                                            appEndCal.set(Calendar.DAY_OF_WEEK, 2);
                                            break;
                                        case "Tuesday":
                                            appEndCal.set(Calendar.DAY_OF_WEEK, 3);
                                            break;
                                        case "Wednsday":
                                            appEndCal.set(Calendar.DAY_OF_WEEK, 4);
                                            break;
                                        case "Thursday":
                                            appEndCal.set(Calendar.DAY_OF_WEEK, 5);
                                            break;
                                        case "Friday":
                                            appEndCal.set(Calendar.DAY_OF_WEEK, 6);
                                            break;
                                        case "Saturday":
                                            appEndCal.set(Calendar.DAY_OF_WEEK, 7);
                                            break;
                                        default:
                                            break;

                                    }
                                    int offPendingIntentId = autogeneratedPendingIntentId();

                                    if(applianceType.equals("Appliances"))
                                    {
                                        //myAlarmManager.SetAlarm(appEndCal, Scene_Id,roomId, applinceId, "false", offPendingIntentId, applianceType, 0);
                                        SceneConfigDataHelper.addSceneConfigTable(AutoGeneratedId.autoGenerated_Scene_Config_ID(), Scene_Id, applinceId, roomId, appStartTime, appEndTime);
                                        //Add to Firebase
                                        DatabaseReference sceneConfigRef = sceneRef.child("sceneConfigDetails").child(AutoGeneratedId.autoGenerated_Scene_Config_ID());
                                        Map<String, Object> sceneConfigDetails = new HashMap<>();
                                        sceneConfigDetails.put("appStartTime", appStartTime);
                                        sceneConfigDetails.put("appEndTime", appEndTime);
                                        sceneConfigDetails.put("applianceId", applinceId);
                                        sceneConfigDetails.put("applianceName", app_Name);
                                        sceneConfigDetails.put("day", day);
                                        sceneConfigDetails.put("slaveId", slave_Id);

                                        sceneConfigDetails.put("roomId", roomId);
                                        sceneConfigDetails.put("offPendingIntentId", offPendingIntentId);
                                        sceneConfigDetails.put("onPendingIntentId", onPenList.get(r));
                                        sceneConfigDetails.put("applianceType", applianceType);
                                        sceneConfigDetails.put("curtainLevel", cur_Level);
                                        sceneConfigRef.updateChildren(sceneConfigDetails);
                                    }else if(applianceType.equals("gateControllers"))
                                    {
                                        // myAlarmManager.SetAlarm(appEndCal, Scene_Id,wspRoomId, gcId, "false", offPendingIntentId, applianceType, 0);
                                        SceneConfigDataHelper.addSceneConfigTable(AutoGeneratedId.autoGenerated_Scene_Config_ID(), Scene_Id, gcId,"",appStartTime, appEndTime);
                                        //Add to Firebase
                                        DatabaseReference sceneConfigRef = sceneRef.child("sceneConfigDetails").child(AutoGeneratedId.autoGenerated_Scene_Config_ID());
                                        Map<String, Object> sceneConfigDetails = new HashMap<>();
                                        sceneConfigDetails.put("appStartTime", appStartTime);
                                        sceneConfigDetails.put("appEndTime", appEndTime);
                                        sceneConfigDetails.put("applianceId", gcId);
                                        sceneConfigDetails.put("applianceName", gcName);
                                        sceneConfigDetails.put("day", day);
                                        sceneConfigDetails.put("roomId", roomId);
                                        sceneConfigDetails.put("offPendingIntentId", offPendingIntentId);
                                        sceneConfigDetails.put("onPendingIntentId", onPenList.get(r));
                                        sceneConfigDetails.put("applianceType", applianceType);
                                        sceneConfigDetails.put("curtainLevel", cur_Level);
                                        sceneConfigRef.updateChildren(sceneConfigDetails);

                                    }else if(applianceType.equals("Sensor")){
                                        SceneConfigDataHelper.addSceneConfigTable(AutoGeneratedId.autoGenerated_Scene_Config_ID(), Scene_Id, gcId,"",appStartTime, appEndTime);
                                        //Add to Firebase
                                        DatabaseReference sceneConfigRef = sceneRef.child("sceneConfigDetails").child(AutoGeneratedId.autoGenerated_Scene_Config_ID());
                                        Map<String, Object> sceneConfigDetails = new HashMap<>();
                                        sceneConfigDetails.put("appStartTime", appStartTime);
                                        sceneConfigDetails.put("appEndTime", appEndTime);
                                        sceneConfigDetails.put("applianceId", sensorId);
                                        sceneConfigDetails.put("applianceName", sensorName);
                                        sceneConfigDetails.put("day", day);
                                        sceneConfigDetails.put("roomId", sensorRoomId);
                                        sceneConfigDetails.put("offPendingIntentId", offPendingIntentId);
                                        sceneConfigDetails.put("onPendingIntentId", onPenList.get(r));
                                        sceneConfigDetails.put("applianceType", applianceType);
                                        sceneConfigDetails.put("curtainLevel", cur_Level);
                                        sceneConfigRef.updateChildren(sceneConfigDetails);
                                    }


                                }
                            } else {
                                Toast.makeText(UserSchedularActivity.this, "U have Alredy Scheduled a Appliance on This Time.\n" +
                                        " Please Select +/- 1 minute", Toast.LENGTH_SHORT).show();
                                getApplianceEndTime(onPenList);

                            }
                        }
                    }
                    else
                    {
                        for(int r=0;r<selectedDays.size();r++)
                        {
                            String day=selectedDays.get(r);
                            SceneConfigDataHelper.addSceneConfigTable(AutoGeneratedId.autoGenerated_Scene_Config_ID(), Scene_Id, applinceId, roomId, appStartTime,"0.0pm");
                            //Add to Firebase
                            DatabaseReference sceneConfigRef = sceneRef.child("sceneConfigDetails").child(AutoGeneratedId.autoGenerated_Scene_Config_ID());
                            Map<String, Object> sceneConfigDetails = new HashMap<>();
                            sceneConfigDetails.put("appStartTime", appStartTime);
                            sceneConfigDetails.put("appEndTime", "0.0pm");
                            sceneConfigDetails.put("applianceId", curtainId);
                            sceneConfigDetails.put("applianceName", curtainName);
                            sceneConfigDetails.put("day", day);
                            sceneConfigDetails.put("roomId", curtainRoonId);
                            sceneConfigDetails.put("offPendingIntentId", 0);
                            sceneConfigDetails.put("onPendingIntentId", onPenList.get(r));
                            sceneConfigDetails.put("applianceType", applianceType);
                            sceneConfigDetails.put("curtainLevel", cur_Level);
                            sceneConfigRef.updateChildren(sceneConfigDetails);
                        }
                    }
                }


            });

            timeAlert.show();
        } catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }
    }



    private int validateApplianceTime(String time)
    {
        List<Scene_Configuration> scene_configurationList=SceneConfigDataHelper.getAllSceneConfig();
        for(int d=0;d<scene_configurationList.size();d++)
        {
            Scene_Configuration scene_configuration=scene_configurationList.get(d);
            String startTime=scene_configuration.appstart_Time;
            String endTime=scene_configuration.append_Time;
            if(!endTime.equals("0.0pm")) {

                if (startTime.equals(time) || endTime.equals(time)) {
                    return 1;

                } else {
                    continue;

                }
            }
        }
        return 0;
    }



    private void sendNotification()
    {
        try {

            builder = new NotificationCompat.Builder(this);

            builder.setContentTitle("Schedular Notification");

            final Calendar c = Calendar.getInstance();
            c.set(Calendar.MINUTE, parseInt(startTimeMinute) - 5);
            c.set(Calendar.SECOND, 0);

            // OK Action
            Intent okActionIntent = new Intent(this, NotificationBroadCastReceiver.class);
            Bundle send = new Bundle();
            send.putInt(notificationId, NOTIFICATION_ID);
            send.putString("sceneId", Scene_Id);
            send.putString("sceneName", Scene_Name);
            okActionIntent.putExtras(send);
            okActionIntent.setAction(OK_ACTION);
            PendingIntent okpendingIntent = PendingIntent.getBroadcast(this, 0, okActionIntent, PendingIntent.FLAG_UPDATE_CURRENT);


            Intent cancleActionIntent = new Intent(this, NotificationBroadCastReceiver.class);
            Bundle send1 = new Bundle();
            send1.putInt(notificationId, NOTIFICATION_ID);
            cancleActionIntent.putExtras(send1);
            cancleActionIntent.setAction(CANCEL_ACTION);
            PendingIntent canclePendingIntent = PendingIntent.getBroadcast(this, 0, cancleActionIntent, PendingIntent.FLAG_UPDATE_CURRENT);

            builder.addAction(0, "Yes", okpendingIntent);
            builder.addAction(0, "No", canclePendingIntent);
            builder.setContentIntent(okpendingIntent);
            builder.setSmallIcon(R.drawable.small_logo1);
            builder.setContentText("" + Scene_Name + " will be Start in Another 5 Minutes. Do u Want To DeActivate It...??????");

            notificationManager = (NotificationManager) getApplicationContext().getSystemService(Context.NOTIFICATION_SERVICE);

            Timer time = new Timer();
            time.schedule(                                                                                                                        new TimerTask() {
                @Override
                public void run()
                {
                    //notificationRef=localRef.child("scene").child(Customer.getCustomer().customerId).child("sceneDetails").child(Scene_Id).child("notificationDetails");
                    notificationRef = localRef.child("notification").child("schedular").child(Customer.getCustomer().customerId)
                            .child(String.valueOf(System.currentTimeMillis()));
                    notificationRef.setValue("" + Scene_Name + " will be starting in Another 5 Minutes. Do u Want To DeActivate It...??????");
                    if (GlobalApplication.isSchedularNotificationSubscribe) {
                        notificationManager.notify(NOTIFICATION_ID, builder.build());
                    }
                }
            }, c.getTime());


        } catch (Exception e)
        {
            DatabaseReference errorRef = localRef.child("notification").child("error").child(Customer.getCustomer().customerId)
                    .child(String.valueOf(System.currentTimeMillis()));
            String currentStatus = e.getMessage();
            errorRef.setValue(currentStatus);
        }
    }


}
